@page "/postdetail/{id}"
<PageTitle>@result.Title</PageTitle>


<MudCard Elevation="0" Class="ma-5">
    <MudText>@($"Bài viết")</MudText>
    <div class="d-flex align-center justify-center">
        <MudText Class="me-auto" Typo="Typo.h5" Style="font-size: 500">@result!.Title</MudText>
        <MudText Align="Align.Right">Ngày tạo: @result.CreatedTime.ToString("hh:mm tt dd/MM/yyyy")</MudText>
    </div>
    
        
        <MudPaper Elevation="0">
            @if (result == null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
        }
        else
        {
            <MudPaper Elevation="0" Class="d-flex align-center">
                <MudText Typo="Typo.subtitle1">Tags:</MudText>
                @if (lstTags.Count == 0)
                {
                    <MudText Typo="Typo.subtitle1" Class="ml-2">Không có tags.</MudText>
                }
                else
                {
                    @foreach (var tag in lstTags)
                    {
                        <MudChip Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">@tag.Name</MudChip>
                    }
                }
            </MudPaper>
            <MudPaper Class="pa-3" Elevation="0">
                <MudText Typo="Typo.h6">Người viết: @result.CreatedName</MudText>
            </MudPaper>

            <MudPaper Class="pa-4" Elevation="0">
                <MudText>@result.Content</MudText>
            </MudPaper>
            <MudText Typo="Typo.h5" Class="my-4">| Tham khảo</MudText>

            @if (lstSuggestPost.Count > 0)
            {
                <div class="my-3 mx-1">
                    @foreach (var item in lstSuggestPost)
                    {
                        <MudNavLink OnClick="@(async() => await OnClick(item.Id.ToString()))"><MudText>@item.Title</MudText></MudNavLink>
                    }
                </div>
            }
        }
    </MudPaper>
</MudCard>
        

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty; 
    [Inject]
    public IClientPostService ClientPostService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    PostDetailDTO result = new();
    PaginationResponse<TagBaseDTO> tagsResult { get; set; } = new();
    List<TagBaseDTO> lstTags { get; set; } = new();
    ClientPostGetTagsByPostIdWithPaginationRequest request = new();
    PostBaseDTO parentPost = new();
    PaginationResponse<PostBaseDTO> childPosts = new();
    List<PostBaseDTO> lstChildPosts = new();
    ClientPostGetChildWithPaginationRequest requestChild = new();
    private List<PostBaseDTO> lstSuggestPost = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        request.Id = Id;
        requestChild.Id = Id;
        result = await ClientPostService.GetPostDetailById(Id);
        tagsResult = await ClientPostService.GetTagsByPostId(request);
        lstTags = tagsResult.Data.ToList();
        parentPost = await ClientPostService.GetParentPostById(Id);
        if (parentPost != null && parentPost.Id != Guid.Empty)
        {
            lstSuggestPost.Add(parentPost);
        }
        childPosts = await ClientPostService.GetChildByPostId(requestChild);
        lstChildPosts = childPosts.Data.ToList();
        if (childPosts != null)
        {
            lstSuggestPost.AddRange(childPosts.Data.ToList());
        }
    }
    private async Task OnClick(string id)
    {
        if(Id != id)
        {
            NavigationManager.NavigateTo($"/postdetail/{id}");
            Id = id;
            lstSuggestPost.Clear();
            await LoadData();
            StateHasChanged();
        }

    }
}
