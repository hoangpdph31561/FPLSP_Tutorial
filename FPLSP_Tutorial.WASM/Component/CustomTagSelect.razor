@using FPLSP_Tutorial.WASM.Data.Client;

<style>
    .mud-dialog-title {
        padding: 0 !important;
    }
</style>

<MudDialog Style="width: 50vw;">
    <TitleContent>
        <div class="d-flex align-center ps-5 pt-3">
            <MudIcon Icon="@Icons.Material.Filled.Add" />
            <MudText Typo="Typo.h6" Style="font-weight: 600">Thêm tag</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div>
            <MudTextField Variant="Variant.Outlined" T="string" @bind-Value="SearchString" Label="Tìm kiếm" DebounceInterval="200" OnDebounceIntervalElapsed="@(async () => await OnSearchFunc())" Immediate></MudTextField>

            <div class="mt-2">
                 @foreach (var i in _lstTagDisPlay.Where(c => _lstTag.Any(d => d.Id == c.Id) == false))
                {
                    // Truyền pthc thêm Tag khỏi List<Tag> vào trong OnClose
                    <MudChip Color="Color.Primary" Variant="Variant.Outlined" CloseIcon="@Icons.Material.Filled.AddCircle" OnClose="@(() => { if(!_lstTag.Any(c => c.Id == i.Id)) {_lstTag.Add(i); }})">@i.Name</MudChip>
                }
            </div>


            <MudText Typo="Typo.caption">Đã chọn:</MudText>
            <MudDivider></MudDivider>
            <div style="overflow: auto; width: 100%;" class="py-2">
                @foreach (var i in _toggleAllTags ? _lstTag : _lstTag.Take(_maxChipDisplay))
                {
                    // Truyền pthc xóa Tag khỏi List<Tag> vào trong OnClose
                    <MudChip Color="Color.Primary" Variant="Variant.Outlined" OnClose="@(() => { _lstTag.Remove(i); })">@i.Name</MudChip>
                }
                @if (_toggleAllTags)
                {
                    <MudChip Color="Color.Default" Variant="Variant.Outlined" OnClick="@(() => _toggleAllTags = false)" Style="font-weight: 500">@("<")</MudChip>
                }
                else
                {
                    if (_lstTag.Count() > _maxChipDisplay)
                    {
                        <MudChip Color="Color.Default" Variant="Variant.Outlined" OnClick="@(() => _toggleAllTags = true)">@("+" + (_lstTag.Count() - _maxChipDisplay))</MudChip>
                    }
                }
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="DeleteServer">Lưu</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public List<TagBaseDTO> _lstTag { get; set; }
    [Parameter]
    public List<TagBaseDTO> _lstTagFromDB { get; set; }
    private string SearchString;
    private List<TagBaseDTO> _lstTagDisPlay = new();
    private bool _toggleAllTags = false;
    private int _maxChipDisplay = 5;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        _lstTagDisPlay = _lstTagFromDB.Take(10).ToList();
    }

    private void DeleteServer()
    {
        MudDialog.Close(DialogResult.Ok(_lstTag));
    }
    private async Task OnSearchFunc()
    {
        if(string.IsNullOrWhiteSpace(SearchString))
        {
            _lstTagDisPlay = _lstTagFromDB.Take(10).ToList();
        }
        else
        {
            _lstTagDisPlay = _lstTagFromDB.Where(x => x.Name.Contains(SearchString)).ToList();
        }
    }
    
}