@page "/lecturer-manager"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.MajorRequest.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.MajorRequest;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.User;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.User.Request;
@layout ManagementLayout

@inject IMajorRequestRepository _repoMajorRequest
@inject IUserRepository _repoUser
@inject IUserMajorRepository _repoUserMajor

@inject IDialogService _diagService;
@inject ISnackbar _mudSnackbar;
@if (_isLoadingAll)
{
    <LoadingIndicator />
}
else
{
    <div class="mx-3 mb-2 px-3 pb-3">
        <MudBreadcrumbs Items="_breadCrumbs"></MudBreadcrumbs>

        <MudPaper Class="" Elevation="2">
            <MudTabs @ref="tabs">
                <MudTabPanel Text="Đang hoạt động">
                    @if (_isLoadingTab1)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
                    }
                    else
                    {
                        <MudTable Items="@_listUser" Style="position:relative;" Elevation="2" Class="m-3">
                            <HeaderContent>
                                
                            </HeaderContent>
                            <RowTemplate>
                                
                            </RowTemplate>
                        </MudTable>
                        <CustomPagination Class="my-1" HasNext="@_presUser.HasNext" OnPageChange="@(async e => await OnPaginationButtonClickTab1(e))" CurrentPageNumber="@_presUser.PageNumber"></CustomPagination>
                        <MudDivider />
                    }
                    }
                </MudTabPanel>
                @*  View danh sách giảng viên chờ duyệt  *@
                <MudTabPanel Text="Chờ duyệt">
                    @if (_isLoadingTab2)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
                    }
                    else
                    {
                        <MudTable Items="@_listMajorRequest" Style="position:relative;" Elevation="2" Class="m-3">
                            
                        </MudTable>
                        <CustomPagination Class="my-1" HasNext="@_presMajorRequest.HasNext" OnPageChange="@(async e => await OnPaginationButtonClickTab2(e))" CurrentPageNumber="@_presMajorRequest.PageNumber"></CustomPagination>
                        <MudDivider />
                    }
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </div>
}


@code {
    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/recreation/post/client"),
        new BreadcrumbItem("Quản lý giảng viên", href: null, disabled: true)
    };

    MudTabs tabs = new();

    private MajorRequestViewWithPaginationRequest _preqMajorRequest = new();
    private PaginationResponse<MajorRequestDTO> _presMajorRequest = new();
    private List<MajorRequestDTO> _listMajorRequest = new();

    private UserViewWithPaginationRequest _preqUser = new();
    private PaginationResponse<UserDTO> _presUser = new();
    private List<UserDTO> _listUser = new();

    #region 
    private bool _isLoadingAll = true;
    private bool _isLoadingTab1 = true;
    private bool _isLoadingTab2 = true;

    private async Task LoadDataMajor()
    {
       
    }
    #endregion
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Run(async () =>
            {
                await LoadDataMajorUser();
                await LoadDataMajor();
            }).ContinueWith((result) =>
            {
                _isLoadingTab1 = false;   
            });
            await LoadDataMajorRequest().ContinueWith((result) =>
            {
                _isLoadingTab2 = false;
            });
            _isLoadingAll = false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private async Task LoadDataMajorRequest()
    {
        
    }
    private async Task LoadDataMajorUser()
    {
        
    }

    private async Task OnDelete(Guid id)
    {
        var request = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn xóa giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var removeConfirm = await _repoMajorRequest.DeleteAsync(request);
            await LoadDataMajorRequest();
        }
    }
    private async Task OnAdd(Guid id, Guid MajorID, Guid? UserId, EntityStatus status)
    {
        var requestDelete = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var requestCreateUser = new Ma
            {
                MajorId = MajorID,
                UserId = UserId,
                Status = status
            };

        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn muốn thêm giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var createConfirm = await _repoUserMajor.CreateMajorUser(requestCreateUser);
            if (!createConfirm)
            {
                var messageErro = await _diagService.ShowMessageBox
             (
                 "Thông báo",
                 "Thêm thất bại !"
             );
            }
            else
            {
                var message = await _diagService.ShowMessageBox
           (
               "Thông báo",
               "Thêm thành công !"
           );
                var removeConfirm = await majorRequestRepo.DeleteMajorRequest(requestDelete);
                await LoadDataMajorRequest();
                await LoadDataMajorUser();

            }

        }
    }

    private async Task OnPaginationButtonClickTab1(int pageNumber)
    {
        _isLoadingTab1 = true;
        _MajorUserRequest.PageNumber = pageNumber;
        await LoadDataMajorUser();
        await LoadDataMajorRequest();
    }

    private async Task OnPaginationButtonClickTab2(int pageNumber)
    {
        _isLoadingTab2 = true;
        _MajorUserRequest.PageNumber = pageNumber;
        await LoadDataMajorUser();
        await LoadDataMajorRequest();
    }

    private async Task OnSearchTab1(string searchString)
    {
        _isLoadingTab1 = true;
        _MajorUserRequest.PageNumber = 1;
        _MajorUserRequest.Email = searchString;
        await LoadDataMajorUser();
    }
    private async Task OnSearchTab2(string searchString)
    {
        _isLoadingTab2 = true;
        _MajorRequestRequest.PageNumber = 1;
        _MajorRequestRequest.Email = searchString;
        await LoadDataMajorRequest();
    }
    private async Task OnSelect(string idMajor )
    {
        _idMajor = idMajor;
        _isLoadingTab1 = true;
        _MajorUserRequest.PageNumber = 1;
        _MajorUserRequest.MajorId = new Guid(idMajor);
        await LoadDataMajorUser();
    }
}
