@page "/user/manage/list"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.MajorRequest.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.MajorRequest;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.User;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.User.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.UserMajor.Request;
@layout ManagementLayout

@inject IMajorRequestRepository _repoMajorRequest
@inject IUserRepository _repoUser
@inject IUserMajorRepository _repoUserMajor

@inject IDialogService _diagService;
@inject ISnackbar _mudSnackbar;

<style>

</style>

@if (_isLoadingAll)
{
    <LoadingIndicator />
}
else
{
    <MudBreadcrumbs Items="_breadCrumbs" Class="ms-3"></MudBreadcrumbs>

    <div class="mx-3 mb-2 px-3 pb-3">
        <MudPaper Class="" Elevation="2">
            <MudTabs @ref="tabs" Rounded="true">
                <MudTabPanel Text="Đang hoạt động">
                    @if (_isLoadingTab1)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
                    }
                    else
                    {
                        <div class="mx-2 mt-2">
                            <MudTable Items="@_listUser" Style="position:relative;" Elevation="2" Class="mx-4 mt-5">
                                <HeaderContent>
                                    <MudTh>STT</MudTh>
                                    <MudTh>Email</MudTh>
                                    <MudTh>Tên</MudTh>
                                    <MudTh>Chức vụ</MudTh>
                                    <MudTh>Chuyên ngành đã tham gia</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@(_listUser.IndexOf(context) + 1)</MudTd>
                                        <MudTd>@context.Email</MudTd>
                                        <MudTd>@context.Username</MudTd>
                                        <MudTd>
                                            @{
                                            string roles = "";
                                            foreach (var i in context.RoleCodes)
                                            {
                                                if (roles != "") roles += ", ";
                                                roles += i;
                                            }
                                        }
                                        @roles
                                    </MudTd>
                                    <MudTd>@context.ListJoinedMajors.Count()</MudTd>
                                </RowTemplate>
                            </MudTable>
                            <CustomPagination Class="my-1" HasNext="@_presUser.HasNext" OnPageChange="@(async e => await OnPaginationButtonClickTab1(e))" CurrentPageNumber="@_presUser.PageNumber"></CustomPagination>
                        </div>
                    }
                </MudTabPanel>
                @*  View danh sách giảng viên chờ duyệt  *@
                <MudTabPanel Text="Chờ duyệt">
                    @if (_isLoadingTab2)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
                    }
                    else
                    {
                        <div class="mx-2 mt-2">
                            <MudTable Items="@_listMajorRequest" Style="position:relative;" Elevation="2" Class="mx-4 mt-5">
                                <HeaderContent>
                                    <MudTh>STT</MudTh>
                                    <MudTh>Tên GV</MudTh>
                                    <MudTh>Chuyên ngành</MudTh>
                                    <MudTh>Hành động</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@(_listMajorRequest.IndexOf(context) + 1)</MudTd>
                                    <MudTd>@_listUser.FirstOrDefault(c => c.Id == context.CreatedBy).Username</MudTd>
                                    <MudTd>@context.MajorName</MudTd>
                                    <MudTd>
                                        <MudFab Color="Color.Primary" Class="mx-1" Size="Size.Small" Icon="@Icons.Material.Filled.Check" OnClick="@(async () => await OnAddToMajor(context))" Title="Xác nhận" DisableElevation="true"></MudFab>
                                            <MudFab Size="Size.Small" Color="Color.Error" Class="m-1" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await OnDelete(context.Id))" Title="Hủy yêu cầu" DisableElevation="true">Xóa</MudFab>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                            <CustomPagination Class="my-1" HasNext="@_presMajorRequest.HasNext" OnPageChange="@(async e => await OnPaginationButtonClickTab2(e))" CurrentPageNumber="@_presMajorRequest.PageNumber"></CustomPagination>
                        </div>
                        
                    }
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </div>
}


@code {
    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/recreation/post/client"),
        new BreadcrumbItem("Quản lý giảng viên", href: null, disabled: true)
    };

    MudTabs tabs = new();

    private MajorRequestViewWithPaginationRequest _preqMajorRequest = new();
    private PaginationResponse<MajorRequestDTO> _presMajorRequest = new();
    private List<MajorRequestDTO> _listMajorRequest = new();

    private UserViewWithPaginationRequest _preqUser = new();
    private PaginationResponse<UserDTO> _presUser = new();
    private List<UserDTO> _listUser = new();

    #region 
    private bool _isLoadingAll = true;
    private bool _isLoadingTab1 = true;
    private bool _isLoadingTab2 = true;

    #endregion
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataTab1().ContinueWith((result) =>
            {
                _isLoadingTab1 = false;
                StateHasChanged();
            });
            await LoadDataTab2().ContinueWith((result) =>
            {
                _isLoadingTab2 = false;
                StateHasChanged();
            });
            _isLoadingAll = false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task LoadDataTab1()
    {
        _presUser = await _repoUser.GetListWithPaginationAsync(_preqUser);
        _listUser = (List<UserDTO>)_presUser.Data;
    }

    private async Task LoadDataTab2()
    {
        _presMajorRequest = await _repoMajorRequest.GetListWithPaginationAsync(_preqMajorRequest);
        if(_presMajorRequest.Data != null)
        {
            _listMajorRequest = (List<MajorRequestDTO>)_presMajorRequest.Data;
        }

    }

    private async Task OnDelete(Guid id)
    {
        var request = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn muốn hủy yêu cầu này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var result = await _repoMajorRequest.DeleteAsync(request);
            if(result)
            {
                _mudSnackbar.Add("Hủy yêu cầu thành công", Severity.Success);
            }
            else
            {
                _mudSnackbar.Add("Hủy yêu cầu thất bại", Severity.Error);
                await LoadDataTab2();
            }
        }
    }

    private async Task OnAddToMajor(MajorRequestDTO req)
    {
        var requestDelete = new MajorRequestDeleteRequest
            {
                Id = req.Id,
            };
        var requestCreateUser = new UserMajorCreateRequest
            {
                MajorId = req.MajorId,
                UserId = req.CreatedBy ?? Guid.Empty,
            };

        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn muốn thêm giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var createConfirm = await _repoUserMajor.CreateAsync(requestCreateUser);
            if (!createConfirm)
            {
                _mudSnackbar.Add("Duyệt thất bại", Severity.Error);

            }
            else
            {
                _mudSnackbar.Add("Duyệt thành công", Severity.Success);
                var removeConfirm = await _repoMajorRequest.DeleteAsync(requestDelete);
                await LoadDataTab2();
            }

        }
    }

    private async Task OnPaginationButtonClickTab1(int pageNumber)
    {
        _isLoadingTab1 = true;
        _preqUser.PageNumber = pageNumber;
    }

    private async Task OnPaginationButtonClickTab2(int pageNumber)
    {
        _isLoadingTab2 = true;
        _preqMajorRequest.PageNumber = pageNumber;
    }

    //private async Task OnSearchTab1(string searchString)
    //{
    //    _isLoadingTab1 = true;
    //    _MajorUserRequest.PageNumber = 1;
    //    _MajorUserRequest.Email = searchString;
    //    await LoadDataMajorUser();
    //}
    //private async Task OnSearchTab2(string searchString)
    //{
    //    _isLoadingTab2 = true;
    //    _MajorRequestRequest.PageNumber = 1;
    //    _MajorRequestRequest.Email = searchString;
    //    await LoadDataMajorRequest();
    //}
    //private async Task OnSelect(string idMajor )
    //{
    //    _idMajor = idMajor;
    //    _isLoadingTab1 = true;
    //    _MajorUserRequest.PageNumber = 1;
    //    _MajorUserRequest.MajorId = new Guid(idMajor);
    //    await LoadDataMajorUser();
    //}
}
