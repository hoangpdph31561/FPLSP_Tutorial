@page "/recreation/post/client"
@using FPLSP_Tutorial.WASM.Data.Client;
@using FPLSP_Tutorial.WASM.Data.Client.Request;
@using FPLSP_Tutorial.WASM.Data.Pagination;
@inject IClientPostService ClientPostService

@layout ManagementLayout
@if(_isLoadingAll)
{
    <LoadingIndicator/>
}
else
{
    <div class="m-2 p-3">
        <MudPaper Class="py-3 px-5" Elevation="2">
            <div Class="d-flex align-center mb-3">
                <MudIcon Icon="@Icons.Material.Filled.Home" Class="me-2" Size="Size.Large"></MudIcon>
                <MudText Typo="Typo.h4" Class="ms-2" Style="font-weight: 500">Trang chủ</MudText>
            </div>

            <MudTextField Immediate Variant="Variant.Outlined" T="string" DebounceInterval="200" Label="Tìm kiếm" Placeholder="Tìm kiếm theo tên..." MaxLength="200" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.End" T="string" OnAdornmentClick="@(() => {})" OnDebounceIntervalElapsed="@(() => {})"></MudTextField>
            <TagSelector ListTag="@_lstTag" ListTagFromDB="@_lstTagFromDB" />
        </MudPaper>

        <div class="py-3"></div>

        <MudPaper Class="px-3 pt-4 pb-3" Elevation="2">
            <MudText Typo="Typo.h6" Class="ms-2" Style="font-weight: bold;">Bài viết hệ thống</MudText>

            <MudDivider Class="mx-2 my-1" DividerType="DividerType.Middle"/>

            <div class="ms-3">
                <ListPostCard ListPost="@_lstPost.FirstOrDefault(c => c.majorId == null).post" IsLoading="@(!_lstMajorPostLoaded.Any(c => c == null))" />
            </div>
        </MudPaper>

        <div class="py-3"></div>

        <MudPaper Class="px-3 pt-4 pb-3" Elevation="2">
            <MudText Typo="Typo.h6" Class="ms-2" Style="font-weight: bold;">Bài viết chuyên ngành</MudText>
            @if (!_isLoadingMajor)
            {
                @foreach (var i in _lstMajor)
                {
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Class="me-2 ms-2"></MudIcon>
                        <MudText Typo="Typo.subtitle2" Class="my-1">@i.Name</MudText>
                    </div>

                    <MudDivider Class="mx-2  my-1" DividerType="DividerType.Middle" />

                    <div class="ms-3">
                        <ListPostCard ListPost="@_lstPost.FirstOrDefault(c => c.majorId == i.Id).post" IsLoading="@(!_lstMajorPostLoaded.Any(c => c == i.Id))" />
                    </div>
                    
                }
            }
            else
            {
                <div class="d-flex align-center">
                    <MudSkeleton Class="me-2 ms-2" Width="20%" />
                </div>

                <MudDivider Class="mx-2  my-1" DividerType="DividerType.Middle" />

                <div class="ms-3">
                    <ListPostCard ListPost="new()" IsLoading="@true" />
                </div>
            }
        </MudPaper>

    </div>
}



@code {



    private List<TagBaseDTO> _lstTag = new();
    private List<TagBaseDTO> _lstTagFromDB = new();

    private PaginationResponse<MajorBaseDTO> _presMajorDTO;
    private ClientPostMajorRequestWithPagination _preqMajor = new();
    private List<MajorBaseDTO> _lstMajor;

    private List<Guid?> _lstMajorPostLoaded = new();
    private List<(List<PostMainDTO> post, Guid? majorId)> _lstPost = new();

    private bool _isLoadingAll = true;
    private bool _isLoadingMajor = true;

    protected async override Task OnInitializedAsync()
    {
        _isLoadingAll = false;
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadMajor().ContinueWith(async (re) => { _isLoadingMajor = false; await LoadPost(); } );
        _lstTagFromDB = await ClientPostService.GetAllListTags();
    }

    private async Task LoadMajor()
    {
        _isLoadingMajor = true;
        _presMajorDTO = await ClientPostService.GetMajorList(_preqMajor);
        _lstMajor = _presMajorDTO.Data.ToList();
    }

    private async Task LoadPost()
    {

        var postSystem = await ClientPostService.GetPostsByMajorId(new()
        {
            MajorId = null,
        });
        _lstPost.Add((postSystem.Data.ToList(), null));
       
        _lstMajorPostLoaded.Add(null);
        StateHasChanged();

        foreach(var i in _lstMajor)
        {
            var postMajor = await ClientPostService.GetPostsByMajorId(new()
                {
                    MajorId = i.Id.ToString(),
                });
            _lstPost.Add((postMajor.Data.ToList(), i.Id));
            _lstMajorPostLoaded.Add(i.Id);
            StateHasChanged();
        }
    }

}
