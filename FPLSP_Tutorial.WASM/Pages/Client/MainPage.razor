@page "/mainpage"
@layout ClientLayout

@using FPLSP_Tutorial.WASM.Data.Client;
@using FPLSP_Tutorial.WASM.Data.Client.Request;
@using FPLSP_Tutorial.WASM.Data.Pagination;

@inject IDialogService DialogService
@inject NavigationManager NavigationManager
<PageTitle>Trang chủ</PageTitle>

@if (_isLoadingAll)
{
    <LoadingIndicator />
}
else
{
    <div Elevation="0" Class="pa-5 mt-3 mx-4 d-flex align-center">
        <MudIcon Icon="@Icons.Material.Filled.Home" Class="me-2" Size="Size.Large"></MudIcon>
        <MudText Typo="Typo.h4" Style="font-weight: 500">Trang chủ</MudText>
    </div>
    <MudPaper Elevation="0" Class="px-5 mx-5">
        <MudTextField Immediate Variant="Variant.Outlined" @bind-Value="SearchString" OnDebounceIntervalElapsed="@(async () => await OnSearchFunc())" DebounceInterval="200" Label="Tìm kiếm" MaxLength="200" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.End" T="string" OnAdornmentClick="@(async () => await OnSearchFunc())"></MudTextField>

        <div Class="d-flex align-center py-2">
            <MudText>Tags: </MudText>
            <div style="overflow: auto; width: 100%;">
                @foreach (var i in _toggleAllTags ? _lstTag : _lstTag.Take(_maxChipDisplay))
                {
                    // Truyền pthc xóa Tag khỏi List<Tag> vào trong OnClose
                    <MudChip Color="Color.Primary" OnClose="@(() => { _lstTag.Remove(i); })">@i.Name</MudChip>
                }
                @if(_toggleAllTags)
                {
                    <MudChip Color="Color.Default" OnClick="@(() => _toggleAllTags = false)" Style="font-weight: 500">@("<")</MudChip>
                }
                else
                {
                    if (_lstTag.Count() > _maxChipDisplay)
                    {
                        <MudChip Color="Color.Default" OnClick="@(() => _toggleAllTags = true)">@("+" + (_lstTag.Count() - _maxChipDisplay))</MudChip>
                    }
                }
            </div>
            
            <MudChip Color="Color.Default" Icon="@Icons.Material.Filled.AddCircle" OnClick="@(async () => { await OnTagSelectionToggle(); })">Thêm</MudChip>
        </div>
        @if(_isSearching)
        {
            @if(_lstPostSearch.Count == 0)
            {
                <MudText>Không có bài viết cần tìm</MudText>
            }
            else
            {
                @foreach (var item in _lstPostSearch)
            {
                    <MudItem xs="12" sm="6" md="4" Class="pa-3">
                        <MudPaper Elevation="2" Class="pa-4">
                            <MudText Typo="Typo.caption">@item.CreatedTime.ToString("hh:MM tt dd/MM/yyyy")</MudText>
                            <div>
                                <MudTooltip Text="@item.Title" Arrow="true" Placement="Placement.Top">
                                    <MudText Typo="Typo.h6" Style="font-weight:bold;" Class="truncated-text">@item.Title</MudText>
                                </MudTooltip>
                            </div>
                            <MudPaper Elevation="0" Class="truncated-inline-text-container">
                                <MudIcon Icon="@Icons.Material.Filled.Man" />
                                <MudText Typo="Typo.caption" Class="truncated-inline-text ">@item.CreatedName</MudText>
                            </MudPaper>
                            <MudText Typo="Typo.caption">Loại bài viết: @item.PostType</MudText>
                            <MudPaper Elevation="0" Class="truncated-text">
                                @if (item.LstTags == null || item.LstTags.Count == 0)
                                {
                                    <MudText Typo="Typo.caption">Không có tags</MudText>
                                }
                                else
                                {
                                    @foreach (var tag in item.LstTags)
                                    {
                                        <MudChip Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">@tag.Name</MudChip>
                                    }
                                }
                            </MudPaper>
                            <MudPaper Elevation="0" Class="d-flex align-center justify-end">
                                <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/postdetail/{item.Id}"))" Color="Color.Primary">Chi tiết<MudText Class="mt-1 px-2 align-center" Typo="Typo.caption"><MudIcon Icon="@Icons.Material.Filled.East" /></MudText></MudButton>
                            </MudPaper>
                        </MudPaper>
                    </MudItem>
                }
            }
        }
        else
        {
            <MudPaper Elevation="0">
                <MudGrid>
                    <MudItem xs="7" sm="8" Class="d-flex align-left flex-start">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Newspaper" Class="me-2"></MudIcon>
                            <MudText Typo="Typo.h5" Class="my-4" Style="font-weight: bold;">Bài viết hệ thống</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="5" sm="4" Class="d-flex justify-end align-center">
                        <MudText><MudNavLink Href="@($"/postbysystem")">>> Tất cả</MudNavLink></MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <PostList MajorId="@null"></PostList>

            <div class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.Newspaper" Class="me-2"></MudIcon>
                <MudText Typo="Typo.h5" Class="my-4" Style="font-weight: bold;">Bài viết chuyên ngành</MudText>
            </div>

            <div class="ms-2">
                @if (_isLoadingList)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
                }
                else
                {
                    @foreach (var item in _lstMajor)
                    {
                        if (item.NumberOfPosts > 0)
                        {
                            <MudPaper Elevation="0">
                                <MudGrid>
                                    <MudItem xs="7" sm="8">
                                        <MudTooltip Text="@item.Name" Arrow="true" Placement="Placement.Top">
                                            <div class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Class="me-2"></MudIcon>
                                                <MudText Typo="Typo.h6" Class="my-4">@item.Name</MudText>
                                            </div>
                                        </MudTooltip>
                                    </MudItem>
                                    <MudItem xs="5" sm="4" Class="d-flex justify-end align-center">
                                        <MudText><MudNavLink Href="@($"/postbymajor/{item.Id}")">>> Tất cả</MudNavLink></MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>

                            <PostList MajorId="@item.Id.ToString()"></PostList>
                        }
                    }
                }
            </div>
            <CustomPagination Class="my-1" HasNext="@_majorDTOS.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="@_majorDTOS.PageNumber"></CustomPagination>
        }
       
    </MudPaper>
}

@code {
    #region Khai báo
    [Inject]
    public IClientPostService ClientPostService { get; set; }
    private string SearchString;
    private PaginationRequest _paginationRequest = new();
    private ClientPostMajorRequestWithPagination _request { get; set; } = new();
    private PaginationResponse<MajorBaseDTO> _majorDTOS;
    private List<MajorBaseDTO> _lstMajor;
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    private Guid _idMajorDetail = Guid.Empty;
    private bool _isSearching = false;
    private int _maxChipDisplay = 10;
    private bool _toggleAllTags = false;
    private List<TagBaseDTO> _lstTag = new();
    private List<TagBaseDTO> _lstTagFromDB = new();
    private ClientPostGetByMajorIdWithPaginationRequest _requestSearch = new()
        {
            MajorId = null,
        };
    private PaginationResponse<PostMainDTO> _lstPostSearchPaginate = new();
    private List<PostMainDTO> _lstPostSearch = new();
    #endregion

    protected async override Task OnInitializedAsync()
    {
        _isLoadingAll = true;
        await LoadData().ContinueWith((val) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }
    private async Task LoadData()
    {
        //lấy ra tên major và id của nó
        _majorDTOS = await ClientPostService.GetMajorList(_request);
        _lstMajor = _majorDTOS.Data.ToList();
        _lstTagFromDB = await ClientPostService.GetAllListTags();
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        _request.PageNumber = pageNumber;
        await LoadData().ContinueWith((val) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }

    private async Task OnTagSelectionToggle()
    {
        List<TagBaseDTO> lstBeforeChange = new();
        foreach (var i in _lstTag) lstBeforeChange.Add(i);

        var parameters = new DialogParameters();

        parameters.Add("_lstTag", _lstTag);
        parameters.Add("_lstTagFromDB", _lstTagFromDB);


        var dialog = DialogService.Show<CustomTagSelect>("Add Tags", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {

            _lstTag = (List<TagBaseDTO>)result.Data;
        }
        else
        {
            _lstTag = lstBeforeChange;
        }
    }
    private async Task OnSearchFunc()
    {
        if(!string.IsNullOrWhiteSpace(SearchString))
        {
            _isSearching = true;
            _requestSearch.StringSearch = SearchString;
            _requestSearch.LstTagsId = _lstTag.Select(x => x.Id).ToList();
            _lstPostSearchPaginate = await ClientPostService.GetPostsByMajorId(_requestSearch);
            _lstPostSearch = _lstPostSearchPaginate.Data.ToList();
        }
        else
        {
            _isSearching = false;
        }
    }

}
