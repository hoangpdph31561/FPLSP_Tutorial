@page "/major/joined"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major;
@layout ManagementLayout

@inject AuthenticationStateProvider _authProvider
@inject NavigationManager _nav
@inject IDialogService _dialog
@inject ISnackbar _snackbar

@inject IMajorRepository _repoMajor
@inject IUserMajorRepository _repoUserMajor

@if (_isLoadingAll)
{
    <LoadingIndicator />
}
else
{
    <MudBreadcrumbs Items="_breadCrumbs" Class="ms-3"></MudBreadcrumbs>

    <div class="mx-3 mb-2 px-3 pb-3">
        <MudPaper Elevation="2" Class="px-1">
            <div class="mx-5 pt-4">
                <div class="d-flex justify-center mb-3">
                    <div class="mr-auto"></div>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await OnClickJoinMajor())">Thêm chuyên ngành</MudButton>
                </div>

                <MudTable Items="@_listMajor" Elevation="3">
                    <HeaderContent>
                        <MudTh>STT</MudTh>
                        <MudTh>Mã CN</MudTh>
                        <MudTh>Tên CN</MudTh>
                        <MudTh>SL bài viết đã tạo</MudTh>
                        <MudTh>Hành động</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTh>@(_listMajor.IndexOf(context) + 1)</MudTh>
                        <MudTh>@context.Code</MudTh>
                        <MudTh>@context.Name</MudTh>
                        <MudTh>@context.NumberOfPostByUser</MudTh>
                        <MudTh>
                            <MudFab Color="Color.Primary" Class="mx-1" Size="Size.Small" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => _nav.NavigateTo("/post/manage/self?idMajor=" + context.Id))" Title="Quản lý bài viết" DisableElevation="true"></MudFab>
                            <MudFab Size="Size.Small" Color="Color.Error" Class="m-1" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OnClickDelete(context.Id))" Title="Xóa" DisableElevation="true">Xóa</MudFab>
                        </MudTh>
                    </RowTemplate>
                </MudTable>
                <CustomPagination Class="my-1" HasNext="@_presMajor.HasNext" OnPageChange="@(async e => {  })" CurrentPageNumber="@_presMajor.PageNumber"></CustomPagination>
            </div>
        </MudPaper>
    </div>
}
@code {
    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/post/client"),
        new BreadcrumbItem("Quản lý bài viết", href: null, disabled: true)
    };
    private Guid? _idUser = null;

    private MajorViewWithPaginationRequest _preqMajor = new()
    {
        PageSize = 20
    };
    private PaginationResponse<MajorDTO> _presMajor = new();
    List<MajorDTO> _listMajor = new();

    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;

    protected override async Task OnInitializedAsync()
    {
        var state = await _authProvider.GetAuthenticationStateAsync();
        var userIdClaim = state.User.FindAll("UserId").FirstOrDefault();

        if (userIdClaim != null)
        {
            _idUser = Guid.Parse(userIdClaim.Value);
        }
        else { }
        _preqMajor.UserId = _idUser;


        await LoadData().ContinueWith((re) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }


    private async Task LoadData()
    {
        _presMajor = await _repoMajor.GetListWithPaginationAsync(_preqMajor);
        _listMajor = (List<MajorDTO>)_presMajor.Data;
    }

    private async Task OnClickJoinMajor()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();

        parameters.Add(nameof(MajorRequestAdd.UserId), _idUser);

        var dialog = _dialog.Show<MajorRequestAdd>("Yêu cầu gia nhập chuyên ngành", parameters, options);
        await dialog.Result;
        await LoadData();
    }

    public async Task OnClickDelete(Guid idMajorDelete)
    {
        var confirm = await _dialog.ShowMessageBox
        (
            "Thông báo",
            (MarkupString)("Xác nhận rời chuyên ngành?<br><span style=\"color: red;\">Các bài viết đã tạo sẽ vẫn tiếp tục được hiển thị cho người dùng khác</span>"),
        "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            var removeConfirm = await _repoUserMajor.DeleteAsync(new()
            {
                UserId = _idUser ?? Guid.Empty,
                MajorId = idMajorDelete,
                DeletedBy = _idUser
            });
            if (removeConfirm)
            {
                _snackbar.Add("Rời thành công", Severity.Success);
            }
            else
            {
                _snackbar.Add("Rời thất bại", Severity.Error);
            }
            await LoadData();
        }
    }
}
