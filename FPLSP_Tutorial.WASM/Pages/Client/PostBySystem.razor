@page "/postbysystem"
@layout ClientLayout

@using FPLSP_Tutorial.WASM.Data.Client.Request;
@using FPLSP_Tutorial.WASM.Data.Client;
@using FPLSP_Tutorial.WASM.Data.Pagination;
@inject IDialogService DialogService
<PageTitle>Bài viết hệ thống</PageTitle>

@if(_isLoadingAll)
{
    <LoadingIndicator/>
}
else
{
    <div class="ma-5 pa-5">
        <MudText Typo="Typo.h5" Style="font-weight: 500;">Bài viết hệ thống</MudText>
        <MudTextField Immediate Variant="Variant.Outlined" @bind-Value="SearchString" OnDebounceIntervalElapsed="@(async () => await OnSearchFunc())" DebounceInterval="200" Label="Tìm kiếm" MaxLength="200" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.End" T="string"></MudTextField>
        <div Class="d-flex align-center py-2">
            <MudText>Tags: </MudText>
            <div style="overflow: auto; width: 100%;">
                @foreach (var i in _toggleAllTags ? _lstTag : _lstTag.Take(_maxChipDisplay))
                {
                    // Truyền pthc xóa Tag khỏi List<Tag> vào trong OnClose
                    <MudChip Color="Color.Primary" OnClose="@(() => { _lstTag.Remove(i); })">@i.Name</MudChip>
                }
                @if (_toggleAllTags)
                {
                    <MudChip Color="Color.Default" OnClick="@(() => _toggleAllTags = false)" Style="font-weight: 500">@("<")</MudChip>
                }
                else
                {
                    if (_lstTag.Count() > _maxChipDisplay)
                    {
                        <MudChip Color="Color.Default" OnClick="@(() => _toggleAllTags = true)">@("+" + (_lstTag.Count() - _maxChipDisplay))</MudChip>
                    }
                }
            </div>
            <MudChip Color="Color.Default" Icon="@Icons.Material.Filled.AddCircle" OnClick="@(async () => { await OnTagSelectionToggle(); })">Thêm</MudChip>
        </div>
        <MudDivider />
        @if (lstPosts == null || lstPosts.Count == 0)
        {
            <MudText Typo="Typo.h3" Class="mx-2 my-4">Không có bài viết</MudText>
        }
        else
        {

            <MudGrid Spacing="0">
                @foreach (var item in lstPosts)
                {
                    <MudItem xs="12" sm="6" md="4" Class="pa-3">
                        <MudPaper Elevation="2" Class="pa-4">
                            <MudText Typo="Typo.caption">@item.CreatedTime.ToString("hh:MM tt dd/MM/yyyy")</MudText>
                            <div>
                                <MudTooltip Text="@item.Title" Arrow="true" Placement="Placement.Top">
                                    <MudText Typo="Typo.h6" Style="font-weight:bold;" Class="truncated-text">@item.Title</MudText>
                                </MudTooltip>
                            </div>
                            <MudPaper Elevation="0" Class="truncated-inline-text-container">
                                <MudIcon Icon="@Icons.Material.Filled.Man" />
                                <MudText Typo="Typo.caption" Class="truncated-inline-text ">@item.CreatedName</MudText>
                            </MudPaper>
                            <MudText Typo="Typo.caption">Loại bài viết: @item.PostType</MudText>
                            <MudPaper Elevation="0" Class="truncated-text">
                                @if (item.LstTags == null || item.LstTags.Count == 0)
                                {
                                    <MudText Typo="Typo.caption">Không có tags</MudText>
                                }
                                else
                                {
                                    @foreach (var tag in item.LstTags)
                                    {
                                        <MudChip Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">@tag.Name</MudChip>
                                    }
                                }
                            </MudPaper>
                            <MudPaper Elevation="0" Class="d-flex align-center justify-end">
                                <MudButton OnClick="@(() => ButtonClick(item.Id))" Color="Color.Primary">Chi tiết<MudText Class="mt-1 px-2 align-center" Typo="Typo.caption"><MudIcon Icon="@Icons.Material.Filled.East" /></MudText></MudButton>
                            </MudPaper>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
            <CustomPagination Class="my-1" HasNext="@result.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="@result.PageNumber"></CustomPagination>
        }
    </div>
}

@code {
    [Inject]
    public IClientPostService ClientPostService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    private ClientPostGetByMajorIdWithPaginationRequest request { get; set; } = new()
        {
            MajorId = null,
            PageSize = 30
        };
    private PaginationResponse<PostMainDTO> result { get; set; }
    private List<PostMainDTO> lstPosts { get; set; }
    private MajorBaseDTO major = new();
    private string SearchString;
    private List<TagBaseDTO> _lstTag = new();
    private int _maxChipDisplay = 10;
    private bool _toggleAllTags = false;
    private List<TagBaseDTO> _lstTagFromDB = new();

    private bool _isLoadingAll = true;

    protected async override Task OnInitializedAsync()
    {
        await LoadData().ContinueWith((re) =>
        {
            _isLoadingAll = false;
        });
    }
    private async Task LoadData()
    {
        result = await ClientPostService.GetPostsByMajorId(request);
        lstPosts = result.Data.ToList();
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {

        request.PageNumber = pageNumber;
        await LoadData();
    }
    private void ButtonClick(Guid id)
    {
        NavigationManager.NavigateTo($"/postdetail/{id}");
    }
    private async Task OnSearchFunc()
    {
        if (!string.IsNullOrWhiteSpace(SearchString))
        {

            request.StringSearch = SearchString;
            request.LstTagsId = _lstTag.Select(x => x.Id).ToList();
            result = await ClientPostService.GetPostsByMajorId(request);
            lstPosts = result.Data.ToList();
        }
        else
        {
            request.StringSearch = null;
            request.LstTagsId.Clear();
            await LoadData();
        }
    }
    private async Task OnTagSelectionToggle()
    {
        List<TagBaseDTO> lstBeforeChange = new();
        foreach (var i in _lstTag) lstBeforeChange.Add(i);

        var parameters = new DialogParameters();

        parameters.Add("_lstTag", _lstTag);
        parameters.Add("_lstTagFromDB", _lstTagFromDB);


        var dialog = DialogService.Show<CustomTagSelect>("Add Tags", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {

            _lstTag = (List<TagBaseDTO>)result.Data;
        }
        else
        {
            _lstTag = lstBeforeChange;
        }
    }
}
