@page "/post/manage/self"
@layout ManagementLayout

@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post.Request;

@inject AuthenticationStateProvider _authProvider
@inject NavigationManager _nav

@inject IPostRepository _repoPost

@if (_isLoadingAll)
{
    <LoadingIndicator />
}
else
{
    <MudBreadcrumbs Items="_breadCrumbs" Class="ms-3"></MudBreadcrumbs>

    <div class="mx-3 mb-2 px-3 pb-3">
        
            <MudPaper Class="px-1" Elevation="2">
                <div class="mx-5 pt-4">
                <div class="mb-2 d-flex justify-center">
                    <div class="mr-auto"></div>
                    <div>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" OnClick="@(async () => { await OnClickCreatePost(); })" Color="Color.Primary">Tạo bài viết</MudButton>
                    </div>
                </div>
                <MudTable Items="@_listPost" Loading="_isLoadingList" Elevation="3">
                    <HeaderContent>
                        <MudTh>STT</MudTh>
                        <MudTh>Tiêu đề</MudTh>
                        <MudTh>Tag</MudTh>
                        <MudTh>SL Bài viết con</MudTh>
                        <MudTh>Trạng thái</MudTh>
                        <MudTh>Hành động</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@(_listPost.IndexOf(context) + 1)</MudTd>
                            <MudTd Style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap; max-width: 10vw;">@context.Title</MudTd>
                            <MudTd>
                                @foreach (var i in context.ListTag.Take(3))
                            {
                                <MudChip Variant="Variant.Outlined">@i.Name</MudChip>
                            }
                            @if (context.ListTag.Count() > 3)
                            {
                                string tooltip = "";
                                foreach (var tag in context.ListTag.Skip(3))
                                {
                                    if (tooltip != "") tooltip += ", ";
                                    tooltip += tag.Name;
                                }
                                <MudTooltip Text="tooltip">
                                    <MudChip Variant="Variant.Outlined">
                                        @("+" + (context.ListTag.Count() - 3))
                                    </MudChip>
                                </MudTooltip>
                            }
                        </MudTd>
                        <MudTd>
                            <MudTooltip Text="Xem chi tiết">
                                <MudChip OnClick="@(() => { _nav.NavigateTo($"/post-manager?idPost={context.Id}"); })">@context.NumberOfChildPost</MudChip>
                            </MudTooltip>
                        </MudTd>
                        <MudTd><BadgeEntityStatus Status="@context.Status" /></MudTd>
                        <MudTd>
                            <MudFab Color="Color.Primary" Size="Size.Small" Class="m-1" DisableElevation="true" StartIcon="@Icons.Material.Filled.AccountTree" OnClick="@(async () => { _nav.NavigateTo($"/post/manage/self?idMajor={idMajor}&idPost={context.Id}"); })" Title="Danh sách bài viết con"></MudFab>
                            <MudFab Color="Color.Primary" Size="Size.Small" Class="m-1" DisableElevation="true" StartIcon="@Icons.Material.Filled.ModeEdit" OnClick="@(async () => { _nav.NavigateTo($"/post/manage/self/update?fallBackUrl={_nav.Uri}&idPost=" + context.Id); })" Title="Chỉnh sửa"></MudFab>
                            <MudFab Color="Color.Error" Size="Size.Small" Class="m-1" DisableElevation="true" StartIcon="@Icons.Material.Filled.Delete" OnClick="@(async () => {})" Title="Xóa"></MudFab>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <CustomPagination Class="my-1" HasNext="@_presPost.HasNext" OnPageChange="@(async e => {  })" CurrentPageNumber="@_presPost.PageNumber"></CustomPagination>
                </div>
            </MudPaper>
    </div>
}


@code {
    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/post/client"),
        new BreadcrumbItem("Quản lý bài viết", href: null, disabled: true)
    };

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? idPost { get; set; }
    public Guid? idPostCurrent = null;

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? idMajor { get; set; }

    private Guid _idUser;

    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;

    private PostViewWithPaginationRequest _preqPost { get; set; } = new();
    private PaginationResponse<PostDTO> _presPost { get; set; } = new();
    private List<PostDTO> _listPost = new();

    protected override async Task OnInitializedAsync()
    {
        var state = await _authProvider.GetAuthenticationStateAsync();
        var userIdClaim = state.User.FindAll("UserId").FirstOrDefault();

        if (userIdClaim != null)
        {
            _idUser = Guid.Parse(userIdClaim.Value);
        }
        else { }

        _preqPost.UserId = _idUser;


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(idPost != idPostCurrent || firstRender)
        {
            _isLoadingAll = true;
            _isLoadingList = true;
            StateHasChanged();
            
            _preqPost.MajorId = idMajor;
            _preqPost.PostId = idPost;

            idPostCurrent = idPost;
            await LoadData().ContinueWith((re) =>
            {
                _isLoadingAll = false;
                _isLoadingList = false;
                StateHasChanged();
            });
        }
    }

    private async Task LoadData()
    {
        _presPost = await _repoPost.GetListWithPaginationAsync(_preqPost);
        if(_presPost.Data != null)
        {
            _listPost = (List<PostDTO>)_presPost.Data;
        }
    }

    private async Task OnClickCreatePost()
    {
        var url = $"/post/manage/self/add?fallBackUrl={_nav.Uri}";

        if (idMajor != null) url += $"&idMajor={idMajor}";
        if (idPost != null) url += $"&idPost={idPost}";

        _nav.NavigateTo(url);
    }
}
