@page "/post/manage/self/update"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Tag;


@layout ManagementLayout

@inject IPostRepository _repoPost;
@inject IMajorRepository _repoMajor;
@inject ITagRepository _repoTag;
@inject ISnackbar _mudSnackbar;
@inject NavigationManager _nav;

<FileImportPopover Enable="@_isEnableFileImport" ReturnString="@((string s) => _rteRef.SetRTEValue(s))" OnClose="@(() => _isEnableFileImport = false)" />

<div class="ma-3">
    <MudBreadcrumbs 
        Items="@(new List<BreadcrumbItem>() {
                        new BreadcrumbItem("Danh sách", "/recreation/post-manager"),
                        new BreadcrumbItem("Cập nhật bài viết", "/recreation/post-update", true)
    })"></MudBreadcrumbs>

    <MudText Typo="Typo.h5" Style="font-weight: 500">Cập nhật bài viết</MudText>

    @if(_isLoadingAll)
    {
        <MudProgressLinear Indeterminate Color="Color.Primary" />
    }
    else
    {
        <MudPaper Class="mt-3 mx-3 pa-4" Elevation="2">
            <div class="row mt-3">
                <div class="col-12"><MudTextField @bind-Value="@_postUpdateRequest.Title" Label="Tiêu đề" Variant="Variant.Outlined"></MudTextField></div>
                <div class="col-12">
                    <TagSelector ListTag="@_listTagSelected" ListTagFromDB="@_listTagFromDB" ToggleAllTags="true" />
                </div>
            </div>

            <div class="d-flex align-center">
                <MudText Typo="Typo.h6" Class="mr-auto">Nội dung</MudText>
                <MudChip Icon="@Icons.Material.Filled.FileUpload" title="Nhập nội dung bằng file truyền vào(.xlsx, .docs)" Color="Color.Success" OnClick="@(() => _isEnableFileImport = true)">Nhập file</MudChip>
            </div>

            <RichTextEditor @ref="@_rteRef" Get="@((string val) => { _postUpdateRequest.Content =  val; })" Set="@_postUpdateRequest.Content" />

            <div class="row">
                <div class="col d-flex justify-content-end">
                    <MudChip OnClick="@(() => _nav.NavigateTo(fallBackUrl))" Color="Color.Error" Icon="@Icons.Material.Filled.ExitToApp">Hủy</MudChip>
                    <MudChip OnClick="@(async () => { await OnSaveAsync(); })" Color="Color.Primary" Icon="@Icons.Material.Filled.Save">Lưu</MudChip>
                </div>
            </div>
        </MudPaper>
        
    }
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? idMajor { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? fallBackUrl { get; set; }


    [Parameter]
    [SupplyParameterFromQuery]
    public string? idPost { get; set; }
    private PostDTO _post = new();

    private List<TagDTO> _listTagFromDB = new();
    private List<TagDTO> _listTagSelected = new();

    RichTextEditor _rteRef = new();

    private bool _isLoadingAll = true;
    private bool _isEnableFileImport = false;

    private PostUpdateRequest _postUpdateRequest = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData().ContinueWith((result) =>
        {
            _isLoadingAll = false;
        });
    }

    private async Task LoadData()
    {
        _post = await _repoPost.GetByIdAsync(Guid.Parse(idPost));
        _postUpdateRequest = new()
        {
            Id = _post.Id,
            PostType = _post.PostType,
            Title = _post.Title,
            Content = _post.Content,
            Status = _post.Status,
            ModifiedBy = Guid.Empty
        };

        _listTagSelected = _post.ListTag;

        if (idMajor != null)
        {
            var majorDTO = await _repoMajor.GetByIdAsync(Guid.Parse(idMajor));
            _listTagFromDB = majorDTO.ListTag;
        }
        else
        {
            _listTagFromDB = await _repoTag.GetListAsync(new()
                {
                    MajorId = null
                });
        }
    }

    private async Task OnSaveAsync()
    {
        await _rteRef.GetRTEValue();

        var result = await _repoPost.UpdateAsync(_postUpdateRequest);
        if(result)
        {
            _mudSnackbar.Add("Cập nhật thành công", Severity.Success);
            _nav.NavigateTo("/recreation/post-manager" + ((_post.PostId == null) ? "" : "?idPost=" + idPost));
        }
        else
        {
            _mudSnackbar.Add("Cập nhật thất bại", Severity.Error);
        }
    }
}
