@page "/major/manage/list"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major.Request;

@layout ManagementLayout

@inject AuthenticationStateProvider _authProvider

@inject NavigationManager _nav
@inject IDialogService _dialog

@if (_isLoadingAll)
{
    <LoadingIndicator />
}
else
{
    <MudBreadcrumbs Items="_breadCrumbs" Class="ms-3"></MudBreadcrumbs>

    <div class="mx-5">
        <MudPaper Elevation="2" Class="py-3 px-5">
            <div class="d-flex align-center">
                <MudText Typo="Typo.h5" Class="mr-auto" Style="font-weight: 500">Danh sách chuyên ngành</MudText>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@(async () => await DialogAdd())" Title="Thêm chuyên ngành" Style="border-right: 2px solid white;"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Search" Title="Tìm kiếm" OnClick="@(() => _isShowFilter = !_isShowFilter)"></MudIconButton>
                </MudButtonGroup>

            </div>
            
        </MudPaper>

        @if (_isShowFilter)
        {
            <div class="mt-5"></div>

            <Animate Animation="Animations.ZoomIn">
                <MudPaper Class="px-5 pt-3 pb-4" Elevation="2">
                    <MudTextField T="string" Variant="Variant.Outlined" Label="Tìm kiếm" Placeholder="Nhập tên, mã cần tìm kiếm..." DebounceInterval="1000" OnDebounceIntervalElapsed="@(async (string val) => { majorRequest.SearchString = val; await OnQueryRequest(); })"></MudTextField>
                </MudPaper>
            </Animate>
        }

        <div class="mt-5"></div>

        <MudTable Items="@_lstmajors" Elevation="2" Loading="@_isLoadingList" CustomHeader="true" HeaderClass="table-head-bordered" Bordered="true" Striped="true">
            <LoadingContent>

            </LoadingContent>
            <HeaderContent>

                <MudTHeadRow>
                    <MudTh rowspan="2">
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.CreatedTime))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">STT</TableSortingIcon>
                    </MudTh>
                    <MudTh rowspan="2">
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.Code))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">Mã</TableSortingIcon>
                    </MudTh>
                    <MudTh rowspan="2">
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.Name))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">Tên</TableSortingIcon>
                    </MudTh>

                    <MudTh colspan="2" Style="text-align: center;">Số lượng giảng viên</MudTh>

                    <MudTh rowspan="2">
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.ListTag))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">SL nhãn</TableSortingIcon>
                    </MudTh>
                    <MudTh rowspan="2">
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.NumberOfPost))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">SL Bài viết</TableSortingIcon>
                    </MudTh>
                    <MudTh rowspan="2">
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.Status))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">Trạng thái</TableSortingIcon>
                    </MudTh>
                    <MudTh rowspan="2">Hành động</MudTh>
                </MudTHeadRow>
                <MudTHeadRow>
                    <MudTh>
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.NumberOfLecturer))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">Hoạt động</TableSortingIcon>
                    </MudTh>
                    <MudTh Style="border-right: 1px solid var(--mud-palette-table-lines);">
                        <TableSortingIcon CallLoadData="@(async () => await OnQueryRequest())" PropertyName="@(nameof(MajorDTO.NumberOfLecturerRequest))" ActivePropertyName="@majorRequest.SortingProperty" ActiveSortingDirection="@majorRequest.SortingDirection" SetPropName="@((e) => majorRequest.SortingProperty = e)" SetSortDir="@((e) => majorRequest.SortingDirection = e)">Yêu cầu quản lý</TableSortingIcon>
                    </MudTh>
                </MudTHeadRow>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@(_lstmajors.IndexOf(context) + 1 + _majorDTO.PageSize * (_majorDTO.PageNumber - 1))</MudTd>
                <MudTd>@context.Code</MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.NumberOfLecturer</MudTd>
                <MudTd>@context.NumberOfLecturerRequest</MudTd>
                <MudTd>@context.ListTag.Count()</MudTd>
                <MudTd>@context.NumberOfPost</MudTd>
                <MudTd><BadgeEntityStatus Status="@context.Status"></BadgeEntityStatus></MudTd>
                <MudTd>
                    <MudFab Size="Size.Small" Color="Color.Primary" Class="m-1" Icon="@Icons.Material.Filled.LabelImportant" OnClick="@(async () => await OnClickTagManager(context.Id))" Title="Quản lý nhãn" DisableElevation="true"></MudFab>
                    <MudFab Size="Size.Small" Color="Color.Primary" Class="m-1" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => DialogUpdate(context.Id))" Title="Chi tiết" DisableElevation="true"></MudFab>
                    <MudFab Size="Size.Small" Color="Color.Error" Class="m-1" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DialogDelete(context.Id))" Title="Xóa" DisableElevation="true">Xóa</MudFab>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <CustomPagination Class="my-1" HasNext="@_majorDTO.HasNext" OnPageChange="@(async e => await OnPaginationButtonClick(e))" CurrentPageNumber="@_majorDTO.PageNumber"></CustomPagination>
    </div>
}

@code {
    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/post/home"),
        new BreadcrumbItem("Quản lý chuyên ngành", href: null, disabled: true)
    };

    private Guid? _idUser = null;

    [Inject]
    public IMajorRepository majorRepository { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    private Guid idMajorDetail = Guid.Empty;


    #region Major 
    List<MajorDTO> _lstmajors;
    private PaginationResponse<MajorDTO> _majorDTO;
    private MajorDeleteRequest majorDelete = new(); 
    private MajorViewWithPaginationRequest majorRequest = new();
    #endregion

    #region 
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isShowFilter = false;
    #endregion



    protected override async Task OnInitializedAsync()
    {
        var state = await _authProvider.GetAuthenticationStateAsync();
        var userIdClaim = state.User.FindAll("UserId").FirstOrDefault();
        if (userIdClaim != null)
        {
            _idUser = Guid.Parse(userIdClaim.Value);
        }
        else { }

        await LoadData().ContinueWith((re) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }

    private async Task LoadData()
    {
        _majorDTO = await majorRepository.GetListWithPaginationAsync(majorRequest);
        _lstmajors = _majorDTO.Data.ToList();
    }

    private async Task OnSearch(string? searchString)
    {
        _isLoadingList = true;
        majorRequest.PageNumber = 1;
        await LoadData().ContinueWith((re) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }

    private async Task DialogAdd()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("OnCloseAdd", EventCallback.Factory.Create(this, OnCloseAdd));
        var dialog = _dialog.Show<MajorManageAdd>("Thêm chuyên ngành", parameters, options);
        await dialog.Result;
        await LoadData();
    }
    private async Task OnCloseAdd()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }


    private async void DialogUpdate(Guid idMajor)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add(nameof(MajorManageUpdate.idMajor), idMajor); 
        var dialog = _dialog.Show<MajorManageUpdate>("Chi tiết chuyên ngành", parameters, options);
        await dialog.Result; 
        await LoadData();
    }

    public async Task DialogDelete(Guid idDelete)
    {
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            (MarkupString)("<h2 style=\"font-weight: 500\">Thông báo</h2>" + "Xác nhận xóa chuyên ngành?"),
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            majorDelete.Id = idDelete;
            var removeConfirm = await majorRepository.DeleteAsync(majorDelete);
            if (removeConfirm)
            {
                _snackbar.Add("Xóa thành công", Severity.Success);
            }
            else
            {
                _snackbar.Add("Xóa thất bại", Severity.Error);
            }
            await LoadData();
        }
    }

    private async Task OnPaginationButtonClick(int pageNumber)
    {
        _isLoadingList = true;
        majorRequest.PageNumber = pageNumber;
        await LoadData().ContinueWith((re) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }

    private async Task OnClickTagManager(Guid idMajor)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();

        parameters.Add(nameof(TagManage.MajorId), idMajor);
        parameters.Add(nameof(TagManage.UserId), _idUser);

        var dialog = _dialog.Show<TagManage>("Quản lý Tag", parameters, options);
        await dialog.Result;
        await LoadData();
    }


    private async Task OnQueryRequest()
    {
        _isLoadingList = true;
        StateHasChanged();
        if(majorRequest.SearchString != "" && majorRequest.SearchString != null)
        {
            majorRequest.PageNumber = 1;
        }
        await LoadData().ContinueWith((re) =>
        {
            _isLoadingList = false;
            StateHasChanged();
        });
        
    }
}