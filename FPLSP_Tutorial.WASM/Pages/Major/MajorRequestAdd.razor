@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major.Request
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.UserMajor.Request
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major
@inject IMajorRepository _repoMajor
@inject IUserMajorRepository _repoUserMajor

@inject ISnackbar _mudSnackbar
@inject IDialogService _diagService;

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Style="font-weight: 500">Thêm chuyên ngành</MudText>

        <MudTextField T="string" Variant="Variant.Outlined" Label="Tìm kiếm" Placeholder="Nhập mã, tên chuyên ngành cần tìm kiếm..." DebounceInterval="1000" OnDebounceIntervalElapsed="@(async val => { _preqMajor.SearchString = val; await OnQueryRequest(); })" Class="mb-2"></MudTextField>

        <MudTable Items="@_listMajor" FixedHeader="true" Height="40vh" Loading="@_isLoadingList">
            <HeaderContent>
                <MudTh>STT</MudTh>
                <MudTh>Mã</MudTh>
                <MudTh>Tên</MudTh>
                <MudTh>Hành động</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@(_listMajor.IndexOf(context) + 1 + _presMajor.PageSize * (_presMajor.PageNumber - 1))</MudTd>
                <MudTd>@context.Code</MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>
                    <MudFab Color="Color.Primary" Class="mx-1" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => OnClickAdd(context.Id))" Title="Tham gia" DisableElevation="true"></MudFab>
                </MudTd>
            </RowTemplate>
        </MudTable>
        @*<CustomPagination Class="my-1" HasNext="@_presMajor.HasNext" OnPageChange="@(async e => await OnPaginationButtonClick(e))" CurrentPageNumber="@_presMajor.PageNumber"></CustomPagination>*@
        <div class="d-flex justify-end">
            <MudButton OnClick="@(() => MudDialog.Close())">Đóng</MudButton>
        </div>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public Guid? UserId { get; set; }

    [Parameter]
    public EventCallback LoadDataParent { get; set; }

    private readonly MajorViewWithPaginationRequest _preqMajor = new();
    private PaginationResponse<MajorDTO> _presMajor = new();
    private List<MajorDTO> _listMajor = new();

    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;

    protected override async Task OnInitializedAsync()
    {
        _preqMajor.UserId = UserId;
        _preqMajor.NotJoined = true;

        await LoadData().ContinueWith(re =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }

    private async Task LoadData()
    {
        _presMajor = await _repoMajor.GetListWithPaginationAsync(_preqMajor);
        if (_presMajor.Data != null)
        {
            _listMajor = (List<MajorDTO>)_presMajor.Data;
        }
    }

    private async Task OnPaginationButtonClick(int pageNumber)
    {
        _isLoadingList = true;
        _preqMajor.PageNumber = pageNumber;
        await LoadData().ContinueWith(re =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }


    private async Task OnClickAdd(Guid idMajor)
    {
        var requestCreateUser = new UserMajorCreateRequest
        {
            MajorId = idMajor,
            UserId = UserId ?? Guid.Empty,
            CreatedBy = UserId ?? Guid.Empty
        };

        var confirm = await _diagService.ShowMessageBox
            (
                "Thông báo",
                "Tham gia chuyên ngành?",
                "Xác nhận",
                cancelText: "Hủy"
            );
        if (confirm == true)
        {
            var createResult = await _repoUserMajor.CreateAsync(requestCreateUser);
            if (createResult)
            {
                _mudSnackbar.Add("Đã tham gia chuyên ngành", Severity.Success);
                await LoadData();
                await LoadDataParent.InvokeAsync();
            }
            else
            {
                _mudSnackbar.Add("Tham gia thất bại", Severity.Error);
            }
        }
    }


    private async Task OnQueryRequest()
    {
        _isLoadingList = true;
        StateHasChanged();
        if (_preqMajor.SearchString != "" && _preqMajor.SearchString != null)
        {
            _preqMajor.PageNumber = 1;
        }
        await LoadData().ContinueWith(re =>
        {
            _isLoadingList = false;
            StateHasChanged();
        });
    }


    //Below: Send join request (Not manage) > Not Used

    //private async Task OnClickAdd(Guid idMajor)
    //{
    //    var result =await _repoMajorRequest.AddAsync(new()
    //    {
    //        MajorId = idMajor,
    //        CreatedBy = UserId
    //    });
    //    if(result)
    //    {
    //        _mudSnackbar.Add("Gửi yêu cầu thành công", Severity.Success);
    //        await LoadData();
    //    }
    //    else
    //    {
    //        _mudSnackbar.Add("Gửi yêu cầu thất bại", Severity.Error);
    //    }
    //}
}