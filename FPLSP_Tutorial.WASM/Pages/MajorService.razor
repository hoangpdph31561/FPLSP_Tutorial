@page "/majorService"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.MajorRequest.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.UserMajor.Request;
@using FPLSP_Tutorial.WASM.Data.MajorRequest;
@using FPLSP_Tutorial.WASM.Data.MajorRequest.Request;
@using FPLSP_Tutorial.WASM.Data.Pagination;
@using FPLSP_Tutorial.WASM.Data.UserMajor;
@using FPLSP_Tutorial.WASM.Data.UserMajor.Request;
@using FPLSP_Tutorial.WASM.Enum;
@using FPLSP_Tutorial.WASM.Repo.Interfaces;

@inject IDialogService _diagService;
@inject ISnackbar _mudSnackbar;

<MudTabs @ref="tabs">
    <MudTabPanel Text="Danh Sách giảng viên">
        <CustomListDisplay IsLoading="@(lstMajorUser == null)" OnSearch="@OnSearch" DisableSearch="@_isDisableControls">

            <HeaderContent>

                <MudMenu Dense AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopRight">

                 </MudMenu>

             </HeaderContent>

              <AdditionalSearchBarColumn>
                 <MudSelect Variant="Variant.Outlined" Class="custom-list-display-border-input" Style="background-color: white;" AnchorOrigin="Origin.BottomCenter" Label="Chuyên ngành" Value="@_idMajor" ValueChanged="@(async (string e) => await OnSelect(e))">
            @foreach (var i in lstMajorUser.GroupBy(c => c.MajorId).Select(c => c.Key))
            {
                        <MudSelectItem Value="@i.ToString()">@lstMajorUser.FirstOrDefault(c => c.MajorId == i).TenChuyenNganh</MudSelectItem>
            }
            </MudSelect>
            </AdditionalSearchBarColumn>

             <BodyContent>
                 <MudPaper Elevation="0" Class="custom-list-display-border">
                     @if (_isLoadingList)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
                    }
                    else
                    {
                        <MudTable Items="@_MajorUserVM.Data" Style="position:relative;" Elevation="0">
                            <HeaderContent>
                                <MudTh>Email</MudTh>
                                <MudTh>Chức vụ</MudTh>
                                <MudTh>Chuyên ngành</MudTh>
                                <MudTh>Trạng thái</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.email</MudTd>
                                @foreach (string role in @context.RoleCodes)
                                {
                                    <MudTd>@role</MudTd>
                                }
                                <MudTd>@context.TenChuyenNganh</MudTd>
                                <MudTd>@context.Status</MudTd>
                                <MudTd>
                                    <div class="d-flex" style="margin-top:10px">
                                    </div>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <CustomPagination Class="my-1" HasNext="@_MajorUserVM.HasNext" OnPageChange="@(async e => await OnPaginationButtonClick(e))" CurrentPageNumber="@_MajorUserRequest.PageNumber"></CustomPagination>
                        <MudDivider />
                    }
                </MudPaper>
            </BodyContent>
        </CustomListDisplay>

    </MudTabPanel>
    @*  View danh sách giảng viên chờ duyệt  *@
    <MudTabPanel Text="Danh Sách giảng viên chờ duyệt">
        <CustomListDisplay IsLoading="@(lstMajorRequest == null)" OnSearch="@OnSearchChoDuyet" DisableSearch="@_isDisableControls">
            <HeaderContent>

                <MudMenu Dense AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopRight">

                 </MudMenu>

             </HeaderContent>
             <BodyContent>
                 <MudPaper Elevation="0" Class="custom-list-display-border">
                     @if (_isLoadingList)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3" />
                    }
                    else
                    {
                        <MudTable Items="@_MajorRequestVM.Data" Style="position:relative;" Elevation="0">
                            <HeaderContent>
                                <MudTh>Email</MudTh>
                                <MudTh>Chuyên ngành</MudTh>
                                <MudTh>Trạng thái</MudTh>
                                <MudTh>Phê duyệt</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.email</MudTd>
                                <MudTd>@context.majorName</MudTd>
                                <MudTd>@context.Status</MudTd>
                                <MudTd>
                                    <div class="d-flex" style="margin-top:10px">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OnAdd(context.Id,context.MajorId,context.CreatedBy,context.Status)">Chấp nhận</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="left:10px" OnClick="() => OnDelete(context.Id)">Từ chối</MudButton>
                                    </div>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <CustomPagination Class="my-1" HasNext="@_MajorRequestVM.HasNext" OnPageChange="@(async e => await OnPaginationButtonClick(e))" CurrentPageNumber="@_MajorRequestRequest.PageNumber"></CustomPagination>
                        <MudDivider />
                    }
                </MudPaper>
            </BodyContent>
        </CustomListDisplay>
    </MudTabPanel>
</MudTabs>
@code {
    MudTabs tabs = new();
    [Inject] private IMajorUserRepo majorUserRepo { get; set; }
    List<MajorUserDto> lstMajorUser;
    [Inject] private IMajorRequestRepo majorRequestRepo { get; set; }
    List<MajorRequestDto> lstMajorRequest { get; set; }

    #region 
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    private bool closeAdd = true;
    private bool closeDetail = true;
    #endregion

    #region Khai bao MajjorUser
    private string _idMajor ;
    private Guid _idMajorUserDetail = Guid.Empty;

    private PaginationResponse<MajorUserDto> _MajorUserVM;

    private ViewMajorUserBySearchRequest _MajorUserRequest = new();
    #endregion

    #region Khai bao MajjorRequest
    private Guid _idMajorRequestDetail = Guid.Empty;
    private PaginationResponse<MajorRequestDto> _MajorRequestVM;
    private ViewMajorRequestSearchWithPaginationRequest _MajorRequestRequest = new();
    #endregion
    protected override async Task OnInitializedAsync()
    {
        _isLoadingAll = true;
        try
        {
            LoadDataMajorUser();
            LoadDataMajorRequest();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        tabs.ActivatePanel(1);
        _isLoadingAll = false;

    }
    private async Task LoadDataMajorRequest()
    {
        _MajorRequestVM = await majorRequestRepo.GetListMajorRequest(_MajorRequestRequest);
        lstMajorRequest = _MajorRequestVM.Data.ToList();
        _isLoadingList = false;
        StateHasChanged();
    }
    private async Task LoadDataMajorUser()
    {
        _MajorUserVM = await majorUserRepo.GetListMajorUser(_MajorUserRequest);
        lstMajorUser = _MajorUserVM.Data.ToList();
        _isLoadingList = false;
        StateHasChanged();
    }

    private async Task OnDelete(Guid id)
    {
        var request = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn xóa giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var removeConfirm = await majorRequestRepo.DeleteMajorRequest(request);
            await LoadDataMajorRequest();
        }
    }
    private async Task OnAdd(Guid id, Guid MajorID, Guid? UserId, EntityStatus status)
    {
        var requestDelete = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var requestCreateUser = new CreateUserMajorRequest
            {
                MajorId = MajorID,
                UserId = UserId,
                Status = status
            };

        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn muốn thêm giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var createConfirm = await majorUserRepo.CreateMajorUser(requestCreateUser);
            if (!createConfirm)
            {
                var messageErro = await _diagService.ShowMessageBox
             (
                 "Thông báo",
                 "Thêm thất bại !"
             );
            }
            else
            {
                var message = await _diagService.ShowMessageBox
           (
               "Thông báo",
               "Thêm thành công !"
           );
                var removeConfirm = await majorRequestRepo.DeleteMajorRequest(requestDelete);
                await LoadDataMajorRequest();
                await LoadDataMajorUser();

            }

        }
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        _MajorUserRequest.PageNumber = pageNumber;
        await LoadDataMajorUser();
        await LoadDataMajorRequest();
    }
    private async Task OnSearch(string searchString)
    {
        _isLoadingList = true;
        _MajorUserRequest.PageNumber = 1;
        _MajorUserRequest.Email = searchString;
        await LoadDataMajorUser();
    }
    private async Task OnSearchChoDuyet(string searchString)
    {
        _isLoadingList = true;
        _MajorRequestRequest.PageNumber = 1;
        _MajorRequestRequest.Email = searchString;
        await LoadDataMajorRequest();
    }
    private async Task OnSelect(string idMajor )
    {
        _idMajor = idMajor;
        _isLoadingList = true;
        _MajorUserRequest.PageNumber = 1;
        _MajorUserRequest.MajorId = new Guid(idMajor);
        await LoadDataMajorUser();
    }
}
