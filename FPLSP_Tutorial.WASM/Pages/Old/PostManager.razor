@page "/post-manager"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post;
@using FPLSP_Tutorial.WASM.Data.Pagination;
@layout ManagementLayout


@inject NavigationManager _navManager;
@inject IPostRepo _repoPost
@inject IDialogService _diagService;
@inject ISnackbar _mudSnackbar;

<CustomListDisplay HideSearch="true" Label="Quản lý bài viết" LabelHelper="" IsLoading="@_isLoadingAll">
    <HeaderContent>
       
    </HeaderContent>
    <BodyContent>
        <MudTable Items="@_listPost" Loading="_isLoadingList">
            <HeaderContent>
                <MudTh>STT</MudTh>
                <MudTh>Tiêu đề</MudTh>
                <MudTh>Tag</MudTh>
                @if(idPost == null)
                {
                    <MudTh>SL Bài viết con</MudTh>
                }
                <MudTh>Trạng thái</MudTh>
                <MudTh>Hành động</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@(_listPost.IndexOf(context) + 1 + _responsePostDto.PageSize * (_responsePostDto.PageNumber - 1))</MudTd>
                <MudTd Style="overflow: hidden;text-overflow: ellipsis;white-space: nowrap; max-width: 10vw;">@context.Title</MudTd>
                <MudTd>
                    @foreach(var i in context.ListTag.Take(3))
                    {
                        <MudChip Variant="Variant.Outlined">@i.Name</MudChip>
                    }
                    @if(context.ListTag.Count() > 3)
                    {
                        string tooltip = "";
                        foreach(var tag in context.ListTag.Skip(3))
                        {
                            if (tooltip != "") tooltip += ", ";
                            tooltip += tag.Name;
                        }
                        <MudTooltip Text="tooltip">
                            <MudChip Variant="Variant.Outlined">
                                @("+" + (context.ListTag.Count() - 3))
                            </MudChip>
                        </MudTooltip>
                    }
                </MudTd>
                @if (idPost == null)
                {
                    <MudTd>
                        <MudTooltip Text="Xem chi tiết">
                            <MudChip OnClick="@(() => { _navManager.NavigateTo($"/post-manager?idPost={context.Id}"); })">@context.CountPost</MudChip>
                        </MudTooltip>
                    </MudTd>
                }
                
                <MudTd><BadgeEntityStatus Status="@context.Status"/></MudTd>
                <MudTd>
                    <MudChip Color="Color.Primary" OnClick="@(async () => { _navManager.NavigateTo("/post-update?idPost=" + context.Id); })">Chỉnh sửa</MudChip>
                    <MudChip Color="Color.Error" OnClick="@(async () => await OnDelete(context.Id))">Xóa</MudChip>
                </MudTd>
            </RowTemplate>
        </MudTable>
        <CustomPagination Class="my-1" HasNext="@_responsePostDto.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="@_responsePostDto.PageNumber"></CustomPagination>
    </BodyContent>
</CustomListDisplay>


@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? idPost { get; set; }


    [Inject] 
    public HttpClient _http { get; set; }

    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;

    PaginationResponse<PostDto> _responsePostDto = new();
    List<PostDto> _listPost = new();


    ViewPostWithPaginationRequest _prPost = new()
        {
            PageNumber = 1,
            PageSize = 10,
        };


    protected override async Task OnParametersSetAsync()
    {
        _isLoadingAll = true;
        _listPost = new();
        _prPost.PostId = idPost == null ? null : Guid.Parse(idPost);
        await LoadData().ContinueWith((result) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }

    private async Task LoadData()
    {
        _responsePostDto = await _repoPost.GetListWithPaginationAsync(_prPost);
        _listPost = _responsePostDto.Data.ToList();
    }

    private async Task OnDelete(Guid id)
    {
        var request = new PostDeleteRequest
            {
                Id = id,
            };
        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn xóa bài viết này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var result = await _repoPost.DeletePostAsync(request);
            if(result)
            {
                _mudSnackbar.Add("Xóa thành công", Severity.Success);
                await LoadData();
            }
            else
            {
                _mudSnackbar.Add("Xóa thất bại", Severity.Error);
            }
        }
    }

    private async Task OnPaginationButtonClick(int pageNumber)
    {
        _isLoadingList = true;
        _prPost.PageNumber = pageNumber;
        await LoadData().ContinueWith((val) =>
        {
            _isLoadingAll = false;
            _isLoadingList = false;
        });
    }
}
