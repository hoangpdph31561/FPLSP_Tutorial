@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post.Request
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Tag
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Tag.TagRequest
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Major.Request
@inject IDialogService DialogService

@inject IMajorRepository _repoMajor
@inject ITagRepository _repoTag

<style>
    :root {
        --mud-zindex-popover: 2001
    }

    .mud-input-control {
        margin-top: 0px;
    }
</style>

<MudOverlay Visible="@Visible" LightBackground="true" ZIndex="1300">
    <MudPaper Class="px-5 pt-2 pb-1" Style="width: 40vw">
        @if (_isLoadingAll)
        {
            <MudProgressLinear Indeterminate="true" Color="Color.Info"></MudProgressLinear>
        }
        else
        {
            <div>
                <MudText Typo="Typo.h6" Style="font-weight: 500">Thông tin bài viết</MudText>
            </div>
            <div class="row">
                <div class="col">
                    <MudText Typo="Typo.caption">Tiêu đề</MudText>
                    <MudTextField Variant="Variant.Outlined" Value="@_bindTitle" ValueChanged="@((string val) => { _bindTitle = val; Validate("title"); })" Immediate></MudTextField>
                    @if (_listDisplayError.Any(c => c.property == "title"))
                    {
                        <MudText Typo="Typo.caption" Color="Color.Error">@_listDisplayError.FirstOrDefault(c => c.property == "title").message</MudText>
                    }
                </div>

            </div>
            <div class="row">
                <AuthorizeView Roles="ADMIN">
                    <div class="col">
                        <MudText Typo="Typo.caption">Loại hình bài viết</MudText>
                        <MudSelect Variant="Variant.Outlined" Value="@_selectedPostType" ValueChanged="@((bool val) => OnSelectPostType(val))" AnchorOrigin="Origin.BottomCenter" Disabled="@(_disablePostType || SpecifyMajorId)">
                            <MudSelectItem Value="true">Hệ thống</MudSelectItem>
                            <MudSelectItem Value="false">Chuyên ngành</MudSelectItem>
                        </MudSelect>
                    </div>
                </AuthorizeView>

                @if (!_selectedPostType)
                {
                    <div class="col">
                        <MudText Typo="Typo.caption">Chuyên ngành</MudText>
                        <MudSelect Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Value="@_selectedMajorId" ValueChanged="@((Guid val) => OnSelectMajor(val))" Disabled="@(SpecifyMajorId || _listMajor.Count() == 0)" HelperText="@(_listMajor.Count() == 0 ? "Không có chuyên ngành nào" : null)">
                            @foreach (var i in _listMajor.OrderByDescending(c => c.ListTag.Count()))
                            {
                                <MudSelectItem Value="@i.Id" Disabled="@(i.ListTag.Count == 0)">@i.Name (@i.ListTag.Count())</MudSelectItem>
                            }
                        </MudSelect>
                    </div>
                }
            </div>
            <div class="row">
                <div class="col">
                    <MudText Typo="Typo.caption">Nhãn</MudText>
                    <div style="border: 1px solid lightgrey; border-radius: 8px">
                        <div class="d-flex align-center" style="min-height: 48px;">
                            @foreach (var i in ListTagSelected)
                            {
                                <MudChip Variant="Variant.Outlined" Size="Size.Small" @onmouseover="@(() => TagOnMouseOver(i.Id))" @onmouseleave="@(() => _hovingTagId = null)" Icon="@(_hovingTagId == i.Id ? Icons.Material.Filled.Delete : null)" OnClick="@(() => TagOnClickRemove(i.Id))">@i.Name</MudChip>
                            }
                            <MudIcon Icon="@Icons.Material.Filled.AddCircle" @onclick="@(async () => await OnClickTagAdd())" Class="@(ListTagSelected.Count() == 0 ? "ms-3" : "")"></MudIcon>
                        </div>
                    </div>
                    @if (_listDisplayError.Any(c => c.property == "tag"))
                    {
                        <MudText Typo="Typo.caption" Color="Color.Error">@_listDisplayError.FirstOrDefault(c => c.property == "tag").message</MudText>
                    }
                </div>
            </div>
            <div class="d-flex justify-content-end my-2">
                <MudButton OnClick="@(async () => { Visible = false; await OnClose.InvokeAsync(); })">Hủy</MudButton>
                <MudButton OnClick="@(async () => await OnClickSave())">Lưu</MudButton>
            </div>
        }
    </MudPaper>
</MudOverlay>

@code {
    private bool _isLoadingAll = false;

    [Parameter]
    public Guid UserId { get; set; }

    [Parameter]
    public PostCreateRequest PostCreateRequest { get; set; } = new();

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public List<TagDTO> ListTagSelected { get; set; } = new();

    [Parameter]
    public EventCallback<List<TagDTO>> BindListTagSelected { get; set; }

    [Parameter]
    public bool SpecifyMajorId { get; set; }

    [Parameter]
    public Guid? MajorId { get; set; }

    private string _bindTitle = "";

    private bool _selectedPostType = false;
    private bool _disablePostType = true;
    private Guid _selectedMajorId = Guid.Empty;

    private Guid? _hovingTagId = null;
    private List<TagDTO> _listTagForSelect = new();
    private List<TagDTO> _listTagSystem = new();

    private List<MajorDTO> _listMajor = new();

    private List<(string property, string message)> _listDisplayError = new();

    protected override async Task OnInitializedAsync()
    {
        _isLoadingAll = true;
        await LoadData().ContinueWith(re => { _isLoadingAll = false; });
    }

    private async Task LoadData()
    {
        _listTagSystem = await _repoTag.GetListAsync(new TagViewRequest
        {
            IgnoreMajorId = false
        });
        _listMajor = await _repoMajor.GetListAsync(new MajorViewRequest
        {
            UserId = UserId
        });

        _disablePostType = false;

        if (_listMajor.Count() > 0)
        {
            _selectedMajorId = _listMajor.First().Id;
        }

        if (SpecifyMajorId)
        {
            if (MajorId == null)
            {
                _selectedPostType = true;
            }
            else
            {
                _selectedPostType = false;
                _selectedMajorId = MajorId ?? Guid.Empty;
            }
        }

        SetTagDisplay();
    }

    private void OnSelectPostType(bool val)
    {
        _selectedPostType = val;
        SetTagDisplay();
    }

    private void OnSelectMajor(Guid val)
    {
        _selectedMajorId = val;
        SetTagDisplay();
    }

    private void SetTagDisplay()
    {
        ListTagSelected = new List<TagDTO>();
        if (_selectedPostType)
        {
            _listTagForSelect = _listTagSystem;
        }
        else
        {
            var major = _listMajor.FirstOrDefault(c => c.Id == _selectedMajorId);
            _listTagForSelect = major == null ? new List<TagDTO>() : major.ListTag;
        }
    }

    private async Task OnClickTagAdd()
    {
        List<TagDTO> lstBeforeChange = new();
        foreach (var i in ListTagSelected) lstBeforeChange.Add(i);

        var parameters = new DialogParameters();

        parameters.Add(nameof(CustomTagSelect.ListTag), ListTagSelected);
        parameters.Add(nameof(CustomTagSelect.ListTagFromDB), _listTagForSelect);


        var dialog = DialogService.Show<CustomTagSelect>("Add Tags", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            ListTagSelected = (List<TagDTO>)result.Data;
        }
        else
        {
            ListTagSelected = lstBeforeChange;
        }

        Validate();
    }

    private void TagOnMouseOver(Guid idTag)
    {
        _hovingTagId = idTag;
    }

    private void TagOnClickRemove(Guid idTag)
    {
        ListTagSelected.Remove(ListTagSelected.FirstOrDefault(c => c.Id == idTag) ?? new TagDTO());
    }

    private async Task OnClickSave()
    {
        PostCreateRequest.Title = _bindTitle;
        await BindListTagSelected.InvokeAsync(ListTagSelected);

        if (!Validate()) return;

        await OnSave.InvokeAsync();
    }

    //Manually because of Tag validation
    private bool Validate(string? property = null)
    {
        if (property == null)
        {
            _listDisplayError.Clear();

            if (_bindTitle == null || _bindTitle == "")
            {
                _listDisplayError.Add(("title", "Bài viết phải có tiêu đề"));
            }
            if (ListTagSelected.Count() == 0)
            {
                _listDisplayError.Add(("tag", "Phải có tối thiểu 1 nhãn"));
            }
            if (_listDisplayError.Count > 0) return false;
            return true;
        }
        _listDisplayError = _listDisplayError.Where(c => c.property != property).ToList();
        if (_bindTitle == null || (_bindTitle == "" && property == "title"))
        {
            _listDisplayError.Add(("title", "Bài viết phải có tiêu đề"));
        }
        if (ListTagSelected.Count() == 0 && property == "tag")
        {
            _listDisplayError.Add(("tag", "Phải có tối thiểu 1 nhãn"));
        }
        if (_listDisplayError.Count > 0) return false;
        return true;
    }


    public async Task Cleanup()
    {
        _bindTitle = "";
    }

}