@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post.Request
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post
@inject IPostRepository _repoPost;

@inject NavigationManager _nav;

<style>
    .post-transform {
        cursor: pointer;
    }

    .post-transform:hover {
        transition: 0.4s all ease;
        transform: scale(1.02);
    }

    .post-content {
        max-height: 0px;
        opacity: 0;
        transition: visibility 0s, opacity 0.1s linear, height 0.5s ease;
    }

    .post-transform:hover .post-content {
        max-height: 80px;
        visibility: visible;
        opacity: 1;
    }

    .overflow-text-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

</style>

<div class="d-flex align-center mb-2">
    <MudText Typo="Typo.h6" Class="mr-auto">Tìm kiếm bài viết</MudText>
    <MudButton OnClick="@(async () => await Cancel.InvokeAsync())">Hủy</MudButton>
</div>


<MudPaper>
    <div class="pa-5">

        @if (_isLoadingList)
        {
            <MudProgressLinear Indeterminate="true" Color="Color.Info"></MudProgressLinear>
        }
        else
        {
            if (_listPost.Count == 0)
            {
                <MudText>Không có bài viết nào</MudText>
            }
            else
            {
                @foreach (var post in _listPost)
                {
                    if (_listPost.IndexOf(post) > 0)
                    {
                        <MudDivider Class="my-3 mx-4" DividerType="DividerType.Middle"></MudDivider>
                    }
                    <MudCard Class="py-2 px-4 post-transform" Elevation="0" Style="border: 1px solid lightgrey;" @onclick="@(() => _nav.NavigateTo($"/post/view/{post.Id}"))">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small"></MudIcon>
                            @{
                                var disName = post.CreatedByName == null || post.CreatedByName == "" ? "N/A" : post.CreatedByName;
                            }
                            <MudText Typo="Typo.caption" Style="font-weight: 500; max-width: 50%" Class="overflow-text-1" title="@disName">@(disName)</MudText>
                            <MudText Typo="Typo.caption" Class="ms-1">@(" | " + post.CreatedTime.ToString("dd/MM/yyyy"))</MudText>
                        </div>

                        <MudText Typo="Typo.h6" Style="font-weight: 500;">@post.Title</MudText>

                        <div class="d-flex align-center my-2">
                            <div class="overflow-hidden">
                                @foreach (var i in post.ListTag)
                                {
                                    <span style="background-color: lightgray; border-radius: 5px;" class="me-1 pa-1">@i.Name</span>
                                }
                            </div>
                        </div>

                    </MudCard>
                }
            }
        }
    </div>
</MudPaper>

@code {

    [Parameter]
    public PostViewWithPaginationRequest PostViewRequest { get; set; }

    [Parameter]
    public EventCallback Cancel { get; set; }

    private PaginationResponse<PostDTO> _presPost = new();
    private List<PostDTO> _listPost = new();

    private bool _isLoadingList = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData(PostViewRequest);
    }


    public async Task LoadData(PostViewWithPaginationRequest request)
    {
        if (request == null) return;
        _isLoadingList = true;
        _presPost = await _repoPost.GetListWithPaginationAsync(request);
        if (_presPost.Data != null)
        {
            _listPost = (List<PostDTO>)_presPost.Data;
        }
        _isLoadingList = false;
        StateHasChanged();
    }

}