@page "/post/home"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post.Request;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Tag.TagRequest;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Tag;
@using FPLSP_Tutorial.WASM.Pages.Post.PostHomeComponent
@inject ITagRepository _repoTag

@layout ManagementLayout

<style>
    .hover-zoom:hover {
        transform: scale(1.01);
        transition: all 0.2s ease;
        cursor: pointer;
    }
</style>

@*<PostSearchPopover />*@

@if(_isLoadingAll)
{
    <LoadingIndicator/>
}
else
{
    <div class="ma-5">
        <Animate Animation="Animations.FadeUp">
            <MudPaper Class="py-3 px-5" Elevation="2">
                <div class="d-flex align-center mb-3">
                    <div class="d-flex align-center mr-auto">
                        <MudIcon Icon="@Icons.Material.Filled.Home" Class="me-2" Size="Size.Large"></MudIcon>
                        <MudText Typo="Typo.h4" Class="ms-2" Style="font-weight: 500">Trang chủ</MudText>
                    </div>
                    <div>
                        <MudButtonGroup>

                        </MudButtonGroup>
                    </div>
                </div>
               

                <div class="d-flex align-center">
                    <MudTextField Immediate Variant="Variant.Outlined" T="string" DebounceInterval="200" Label="Tìm kiếm" Placeholder="Tìm kiếm..." MaxLength="200" AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.End" Value="@_searchString" ValueChanged="@((string val) =>  { _searchString = val; })" OnAdornmentClick="@(() => {  OnSearchClick(); })" OnDebounceIntervalElapsed="@(() => {})"></MudTextField>
                </div>
               
                <TagSelector ListTag="@_listTagSelected" ListTagFromDB="@_listTagFromDB" />
            </MudPaper>
        </Animate>

        <div class="mt-3"></div>

        @if(!_isSearching)
        {
            <PostList />
        }
        else
        {
            <PostSearch />
        }

    </div>
}



@code {
    private TagViewRequest _preqTag = new();
    private PaginationResponse<TagDTO> _presTag = new();
    private List<TagDTO> _listTagFromDB = new();
    private List<TagDTO> _listTagSelected = new();

    private PostViewWithPaginationRequest _requestPostSearchWithPagination = new()
    {

    };

    private string _searchString = "";

    private bool _isSearching = false;

    private bool _isLoadingAll = true;
    private bool _isLoadingMajor = true;

    protected async override Task OnInitializedAsync()
    {
        await LoadData().ContinueWith((re) =>
        {
            _isLoadingAll = false;
        });
    }

    private async Task LoadData()
    {
        _listTagFromDB = await _repoTag.GetListAsync(_preqTag);
    }

    private async void OnSearchClick()
    {
        if (_listTagSelected.Count == 0 && (_searchString == null || _searchString == ""))
        {
            return;
        }
        _requestPostSearchWithPagination.SearchString = _searchString;
        _requestPostSearchWithPagination.ListTagId = _listTagSelected.Select(c => c.Id).ToList();
        _isSearching = true;
        
    }
}
