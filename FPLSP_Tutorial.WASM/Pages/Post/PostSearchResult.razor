@page "/post/search"
@layout ManagementLayout

@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post.Request;
@using System.Text.Json;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post;

@inject IPostRepository _repoPost
@inject NavigationManager _nav

<style>
    .post-transform {
        cursor: pointer;
    }

        .post-transform:hover {
            transition: 0.4s all ease;
            transform: scale(1.02);
        }

    .post-content {
        max-height: 0px;
        opacity: 0;
        transition: visibility 0s, opacity 0.1s linear, height 0.5s ease;
    }

    .post-transform:hover .post-content {
        max-height: 80px;
        visibility: visible;
        opacity: 1;
    }

    .overflow-text-1 {
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

</style>

<MudBreadcrumbs Items="_breadCrumbs" Class="ms-2"></MudBreadcrumbs>

<div class="mx-5">
    <MudPaper Class="pa-5">
        <div class="d-flex align-center pb-3">
            <MudText Typo="Typo.h5" Style="font-weight: 500" Class="mr-auto">Kết quả tìm kiếm</MudText>
            <MudButton OnClick="@(() => { _nav.NavigateTo("/post/home"); })">Quay lại</MudButton>
        </div>

        @if(_isLoadingList)
        {
            <MudProgressLinear Indeterminate="true"></MudProgressLinear>
        }
        else
        {
            foreach (var post in _listPost)
            {
                if (_listPost.IndexOf(post) > 0)
                {
                    <MudDivider Class="my-3 mx-4" DividerType="DividerType.Middle"></MudDivider>
                }
                <MudCard Class="py-2 px-4 post-transform" Elevation="0" Style="border: 1px solid lightgrey;" @onclick="@(() => _nav.NavigateTo($"/post/view/{post.Id}"))">
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small"></MudIcon>
                        @{
                            var disName = (post.CreatedByName == null || post.CreatedByName == "") ? "N/A" : post.CreatedByName;
                        }
                        <MudText Typo="Typo.caption" Style="font-weight: 500; max-width: 50%" Class="overflow-text-1" title="@disName">@(disName)</MudText>
                            <MudText Typo="Typo.caption"> | @post.CreatedTime.ToString("dd/MM/yyyy")</MudText>
                        </div>

                        <MudText Typo="Typo.h6" Style="font-weight: 500;">@post.Title</MudText>

                        <div class="d-flex align-center my-2">
                            <div class="overflow-hidden">
                                @foreach (var i in post.ListTag)
                            {
                                <span style="background-color: lightgray; border-radius: 5px;" class="me-1 pa-1">@i.Name</span>
                            }
                        </div>
                    </div>

                </MudCard>
            }
        }
        
    </MudPaper>
</div>



@code {
    private List<BreadcrumbItem> _breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Trang chủ", href: "/post/home"),
        new BreadcrumbItem("Tìm kiếm", href: null, disabled: true)
    };

    [Parameter]
    [SupplyParameterFromQuery(Name = "searchstring")]
    public string? _searchString { get; set; }


    [Parameter]
    [SupplyParameterFromQuery(Name = "listtagid")]
    public string? _listTagIdString { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "uid")]
    public string? _userId { get; set; }

    private PostViewWithPaginationRequest _preqPostWithPagination = new()
        {
            PostType = 1,
            PageSize = 10
        };
    private PaginationResponse<PostDTO> _presPost = new();
    private List<PostDTO> _listPost = new();

    private bool _isLoadingList = false;


    protected override async Task OnInitializedAsync()
    {
        _isLoadingList = true;
        await LoadData().ContinueWith((re) =>
        {
            _isLoadingList = false;
        });
    }

    private async Task LoadData()
    {
        if ((_searchString == null && _listTagIdString == null) || _userId == null)
        {
            _nav.NavigateTo("/post/home");
        }
        else
        {
            if (_searchString != null) _preqPostWithPagination.SearchString = _searchString;
            if (_listTagIdString != null) _preqPostWithPagination.ListTagId = JsonSerializer.Deserialize<List<Guid>>(_listTagIdString) ?? new();

            _presPost = await _repoPost.GetListWithPaginationAsync(_preqPostWithPagination);
            if (_presPost.Data != null)
            {
                _listPost = (List<PostDTO>)_presPost.Data;
            }
        }
    }
}
