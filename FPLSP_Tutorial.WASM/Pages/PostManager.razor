@page "/post-manager"
@using FPLSP_Tutorial.Application.DataTransferObjects.ClientPost;
@using FPLSP_Tutorial.Application.DataTransferObjects.Tag;
@using FPLSP_Tutorial.Application.ValueObjects.Response;
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.Post;
@using FPLSP_Tutorial.WASM.Data.Pagination;

<h3>PostServices</h3>

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
          Items="@_posts"
          GroupBy="_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
          GroupFooterClass="mb-4"
          Dense="true"
@ref="_tableRef">
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>STT</MudTh>
        <MudTh>tiêu đề</MudTh>
        <MudTh>gán thẻ</MudTh>
        <MudTh>Thể loại</MudTh>
        <MudTh>Tác vụ</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate> 
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}") </MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="STT">@context.STT</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        @foreach (var x in context.tagDtos)
        {
                <em>@x.Name,  </em>
        }
        <MudTd DataLabel="Type">@context.Type</MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    [Inject] public HttpClient _http { get; set; }
    private List<PostDto> _posts = new List<PostDto>();
    private MudTable<PostDto>? _tableRef;

    protected override async Task OnInitializedAsync()
    {
        await GetListPost();
    }

    private TableGroupDefinition<PostDto> _groupDefinition = new()
        {
            GroupName = "",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.Title,
        };


    private async Task GetListPost()
    {
        // lấy danh sách bài viết theo IdMajor
        var postAPI = await _http.GetFromJsonAsync<PaginationResponse<PostMainDTO>>($"https://localhost:7225/api/CLientPosts/getPostByMajorId?MajorId={null}");

        // lấy listPost
        var post = postAPI!.Data!.ToList();

        if (post != null)
        {
            foreach (var item in post)
            {
                // lấy listTag theo idPost
                var TagAPI = await _http.GetFromJsonAsync<RequestResult<List<TagDto>>>($"https://localhost:7225/api/Tag?IdMajor={null}&IdPost={item.Id}");

                var result = new PostDto()
                    {
                        Id = item.Id,
                        STT = +1,
                        tagDtos = TagAPI!.Data!.ToList(),
                        Title = item.Title,
                        Type = item.PostType
                    };
                _posts.Add(result);
            }
        }
    }
}
