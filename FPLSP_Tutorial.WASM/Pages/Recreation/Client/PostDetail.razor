@page "/recreation/post/view/{Id}"

@using FPLSP_Tutorial.WASM.Data.Client;
@using FPLSP_Tutorial.WASM.Data.Client.Request;
@using FPLSP_Tutorial.WASM.Data.Pagination;
@layout ManagementLayout

@if(_isLoadingAll)
{
    <LoadingIndicator/>
}
else
{

    <div class="mx-3 mb-2 px-3 pb-3">
        <MudBreadcrumbs Items="@(new List<BreadcrumbItem>() {
                        new BreadcrumbItem("Trang chủ", href: "/recreation/post/client"),
                        new BreadcrumbItem("Bài viết", href: null, disabled: true)
    })"></MudBreadcrumbs>
        <MudPaper Class="p-4" Elevation="2">
            <div class="d-flex align-center">
                <div class="overflow-hidden">
                    @foreach (var i in lstTags)
                    {
                        <span style="font-size: 20px; background-color: lightgray; border-radius: 10px;" class="me-2 pa-2">@i.Name</span>
                    }
                </div>
            </div>
            <div class="mt-2">
                <MudText Typo="Typo.h4" Style="word-wrap:break-word">
                    <span style="font-weight:500;">@result!.Title</span>
                </MudText>
                <MudText Typo="Typo.body1">Tạo bởi: <span style="font-weight: 500">@result.CreatedName</span><span> | @result.CreatedTime.ToString("dd/MM/yyyy")</span></MudText>
            </div>
            <MudDivider Class="my-3"></MudDivider>
            <div>
                @((MarkupString)result.Content)
            </div>
        </MudPaper>

        <div class="d-flex align-center justify-center mt-4 mb-2">
            <MudIcon Icon="@Icons.Material.Filled.Share" Size="Size.Small"></MudIcon>
            <MudText Typo="Typo.h6" Class="ms-1">Các bài viết tham khảo</MudText>
        </div>
        <MudDivider/>
            <div Class="mx-1">
                <ListPostCard CardCol="4" ListPost="@lstSuggestPost.Take(3).ToList()" IsLoading="@(lstSuggestPost == null)" />
            </div>
        <MudDivider />
    </div>
}



@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;
    [Inject]
    public IClientPostService ClientPostService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    PostDetailDTO result = new();
    PaginationResponse<TagBaseDTO> tagsResult { get; set; } = new();
    List<TagBaseDTO> lstTags { get; set; } = new();
    ClientPostGetTagsByPostIdWithPaginationRequest request = new();
    PostMainDTO parentPost = new();
    PaginationResponse<PostMainDTO> childPosts = new();
    List<PostMainDTO> lstChildPosts = new();
    ClientPostGetChildWithPaginationRequest requestChild = new();
    private List<PostMainDTO> lstSuggestPost = new();

    private bool _isLoadingAll = true;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(Id != result.Id.ToString())
        {
            await LoadData().ContinueWith((re) =>
            {
                _isLoadingAll = false;
                StateHasChanged();
            });
        }

    }

    private async Task LoadData()
    {
        request.Id = Id;
        requestChild.Id = Id;
        result = await ClientPostService.GetPostDetailById(Id);
        tagsResult = await ClientPostService.GetTagsByPostId(request);
        lstTags = tagsResult.Data.ToList();
        parentPost = await ClientPostService.GetParentPostById(Id);
        if (parentPost != null && parentPost.Id != Guid.Empty)
        {
            lstSuggestPost.Add(parentPost);
        }
        childPosts = await ClientPostService.GetChildByPostId(requestChild);
        lstChildPosts = childPosts.Data.ToList();
        if (childPosts != null)
        {
            lstSuggestPost.AddRange(childPosts.Data.ToList());
        }
    }
    private async Task OnClick(string id)
    {
        if (Id != id)
        {
            NavigationManager.NavigateTo($"/recreation/postdetail/{id}");
            Id = id;
            lstSuggestPost.Clear();
            await LoadData();
            StateHasChanged();
        }

    }
}
