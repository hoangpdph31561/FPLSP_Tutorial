@page "/user-manager"
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.MajorRequest.Request
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.User
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.User.Request
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.UserMajor.Request
@using FPLSP_Tutorial.WASM.Data.DataTransferObjects.MajorRequest
@layout ManagementLayout

@inject IMajorRequestRepository _repoMajorRequest
@inject IUserRepository _repoUser
@inject IUserMajorRepository _repoUserMajor

@inject IDialogService _diagService;
@inject ISnackbar _mudSnackbar;

<style>

</style>

@if (_isLoadingAll)
{
    <LoadingIndicator/>
}
else
{
    <MudBreadcrumbs Items="_breadCrumbs" Class="ms-3"></MudBreadcrumbs>

    <div class="mx-5">
        <MudPaper Class="" Elevation="2">
            <MudTabs @ref="tabs" Rounded="true">
                <MudTabPanel Text="Danh sách giảng viên">
                    @if (_isLoadingTab1)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3"/>
                    }
                    else
                    {
                        <div class="mx-5 mt-5">
                            <MudTextField T="string" Variant="Variant.Outlined" Label="Tìm kiếm" Placeholder="Nhập tên bài viết cần tìm kiếm..." DebounceInterval="1000" OnDebounceIntervalElapsed="@(async val => { _preqUser.SearchString = val; await OnQueryRequestTab1(); })" Class="mb-2"></MudTextField>


                            <MudTable Items="@_listUser" Style="position:relative;" Bordered="true" Striped="true" Loading=@(_isLoadingListTab1)>
                                <HeaderContent>
                                    <MudTh>STT</MudTh>
                                    <MudTh>Email</MudTh>
                                    <MudTh>Tên</MudTh>
                                    <MudTh>Chức vụ</MudTh>
                                    <MudTh>Chuyên ngành đã tham gia</MudTh>
                                    <MudTh>Hành động</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@(_listUser.IndexOf(context) + 1)</MudTd>
                                    <MudTd>@context.Email</MudTd>
                                    <MudTd>@context.Username</MudTd>
                                    <MudTd>
                                        @{
                                            var roles = "";
                                            foreach (var i in context.RoleCodes)
                                            {
                                                if (roles != "") roles += ", ";
                                                roles += i;
                                            }
                                        }
                                        @roles
                                    </MudTd>
                                    <MudTd>
                                        @context.ListJoinedMajors.Count()
                                    </MudTd>
                                    <MudTd>
                                        <MudFab OnClick="@(() => { if (_isShowingLecturerDetail == context.Id) _isShowingLecturerDetail = null; else _isShowingLecturerDetail = context.Id; })" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Pageview" Size="Size.Small" DisableElevation="true" Disabled="@(context.ListJoinedMajors.Count == 0)">Xem chi tiết</MudFab>
                                    </MudTd>
                                </RowTemplate>
                                <ChildRowContent>
                                    <MudTr Style="@(_isShowingLecturerDetail != context.Id ? "display: none;" : "")">
                                        <td colspan="6">
                                            <div class="ma-5">
                                                <div class="d-flex align-center mb-2">
                                                    <MudText Style="font-weight: 500" Class="mr-auto">Danh sách chuyên ngành đã tham gia</MudText>
                                                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Close" OnClick="@(() => _isShowingLecturerDetail = null)"></MudIconButton>
                                                </div>
                                                <MudTable Items="@context.ListJoinedMajors" Context="major" Dense="true">
                                                    <HeaderContent>
                                                        <MudTh>STT</MudTh>
                                                        <MudTh>Mã</MudTh>
                                                        <MudTh>Tên</MudTh>
                                                        <MudTh>Quyền</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate>
                                                        <MudTd>@(context.ListJoinedMajors.IndexOf(major) + 1)</MudTd>
                                                        <MudTd>@major.MajorCode</MudTd>
                                                        <MudTd>@major.MajorName</MudTd>
                                                        <MudTd>
                                                            <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.RemoveRedEye" Title="Xem bài viết"></MudIcon>
                                                            @if (major.IsManager)
                                                            {
                                                                <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.EditNote" Title="Thêm/Xóa bài viết của bản thân"></MudIcon>
                                                            }
                                                        </MudTd>
                                                    </RowTemplate>
                                                </MudTable>
                                            </div>
                                        </td>
                                    </MudTr>
                                </ChildRowContent>
                            </MudTable>
                            <CustomPagination Class="my-1" HasNext="@_presUser.HasNext" OnPageChange="@(async e => await OnPaginationButtonClickTab1(e))" CurrentPageNumber="@_presUser.PageNumber"></CustomPagination>
                        </div>
                    }
                </MudTabPanel>
                @*  View danh sách giảng viên chờ duyệt  *@
                <MudTabPanel Text="Yêu cầu chuyên ngành">
                    @if (_isLoadingTab2)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="m-3"/>
                    }
                    else
                    {
                        <MudTable Items="@_listMajorRequestGrouped" Style="position:relative;" Elevation="0" Bordered="true" Striped="true">
                            <HeaderContent>
                                <MudTh>STT</MudTh>
                                <MudTh>Email GV</MudTh>
                                <MudTh>Tên GV</MudTh>
                                <MudTh>SL Yêu cầu</MudTh>
                                <MudTh>Hành động</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@(_listMajorRequestGrouped.IndexOf(context) + 1)</MudTd>
                                <MudTd>@context.Key.email</MudTd>
                                <MudTd>@context.Key.name</MudTd>
                                <MudTd>@context.Count()</MudTd>
                                <MudTd>
                                    <MudFab OnClick="@(() => _isShowingMajorRequestDetail = _isShowingMajorRequestDetail == null ? context.Key.email : null)" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Pageview" Size="Size.Small" DisableElevation="true">Xem chi tiết</MudFab>
                                </MudTd>
                            </RowTemplate>
                            <ChildRowContent>
                                <MudTr Style="@(_isShowingMajorRequestDetail != context.Key.email ? "display: none;" : "")">
                                    <td colspan="5">
                                        <div class="ma-5">
                                            <div class="d-flex align-center mb-2">
                                                <MudText Style="font-weight: 500" Class="mr-auto">Chi tiết yêu cầu chuyên ngành</MudText>
                                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Close" OnClick="@(() => _isShowingMajorRequestDetail = null)"></MudIconButton>
                                            </div>

                                            <MudTable Items="@context" Context="major" Dense="true">
                                                <HeaderContent>
                                                    <MudTh>STT</MudTh>
                                                    <MudTh>Mã</MudTh>
                                                    <MudTh>Tên</MudTh>
                                                    <MudTh>Loại yêu cầu</MudTh>
                                                    <MudTh>Hành động</MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd>@(context.Select(c => c.Id).ToList().IndexOf(major.Id) + 1)</MudTd>
                                                    <MudTd>@major.MajorCode</MudTd>
                                                    <MudTd>@major.MajorName</MudTd>
                                                    <MudTd>@(major.IsManager ? "Quản lý" : "Xem")</MudTd>
                                                    <MudTd>
                                                        <MudIconButton Color="Color.Primary" Class="mx-1" Size="Size.Small" Icon="@Icons.Material.Filled.Check" OnClick="@(async () => await OnAddToMajor(major))" Title="Xác nhận" DisableElevation="true"></MudIconButton>
                                                        <MudIconButton Size="Size.Small" Color="Color.Error" Class="m-1" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await OnDelete(major.Id))" Title="Hủy yêu cầu" DisableElevation="true">Xóa</MudIconButton>
                                                    </MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                        </div>
                                    </td>
                                </MudTr>
                            </ChildRowContent>
                        </MudTable>
                        <CustomPagination Class="my-1" HasNext="@_presMajorRequest.HasNext" OnPageChange="@(async e => await OnPaginationButtonClickTab2(e))" CurrentPageNumber="@_presMajorRequest.PageNumber"></CustomPagination>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </div>
}


@code {

    private readonly List<BreadcrumbItem> _breadCrumbs = new()
    {
        new BreadcrumbItem("Trang chủ", "/recreation/post/client"),
        new BreadcrumbItem("Quản lý giảng viên", null, true)
    };

    MudTabs tabs = new();

    private readonly MajorRequestViewWithPaginationRequest _preqMajorRequest = new();
    private PaginationResponse<MajorRequestDTO> _presMajorRequest = new();
    private List<MajorRequestDTO> _listMajorRequest = new();
    private List<IGrouping<(string email, string name), MajorRequestDTO>>? _listMajorRequestGrouped;

    private readonly UserViewWithPaginationRequest _preqUser = new();
    private PaginationResponse<UserDTO> _presUser = new();
    private List<UserDTO> _listUser = new();

    #region

    private bool _isLoadingAll = true;
    private bool _isLoadingTab1 = true;
    private bool _isLoadingTab2 = true;

    private bool _isLoadingListTab1;
    private bool _isLoadingListTab2 = false;

    private Guid? _isShowingLecturerDetail;
    private string? _isShowingMajorRequestDetail;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataTab1().ContinueWith(result =>
            {
                _isLoadingTab1 = false;
                StateHasChanged();
            });
            await LoadDataTab2().ContinueWith(result =>
            {
                _isLoadingTab2 = false;
                StateHasChanged();
            });
            _isLoadingAll = false;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task LoadDataTab1()
    {
        _presUser = await _repoUser.GetListWithPaginationAsync(_preqUser);
        _listUser = (List<UserDTO>)_presUser.Data;
    }

    private async Task LoadDataTab2()
    {
        _presMajorRequest = await _repoMajorRequest.GetListWithPaginationAsync(_preqMajorRequest);
        if (_presMajorRequest.Data != null)
        {
            _listMajorRequest = (List<MajorRequestDTO>)_presMajorRequest.Data;
        }
        _listMajorRequestGrouped = _listMajorRequest.GroupBy(c => (c.CreatedByEmail, c.CreatedByName)).ToList();
    }

    private async Task OnDelete(Guid id)
    {
        var request = new MajorRequestDeleteRequest
        {
            Id = id
        };
        var confirm = await _diagService.ShowMessageBox
            (
                "Thông báo",
                "Bạn chắn chắn muốn hủy yêu cầu này?",
                "Xác nhận",
                cancelText: "Hủy"
            );
        if (confirm == true)
        {
            var result = await _repoMajorRequest.DeleteAsync(request);
            if (result)
            {
                _mudSnackbar.Add("Hủy yêu cầu thành công", Severity.Success);
                await LoadDataTab2();
            }
            else
            {
                _mudSnackbar.Add("Hủy yêu cầu thất bại", Severity.Error);
            }
        }
    }

    private async Task OnAddToMajor(MajorRequestDTO req)
    {
        var requestDelete = new MajorRequestDeleteRequest
        {
            Id = req.Id
        };

        var confirm = await _diagService.ShowMessageBox
            (
                "Thông báo",
                "Xác nhận duyệt yêu cầu?",
                "Xác nhận",
                cancelText: "Hủy"
            );
        if (confirm == true)
        {
            var user = _listUser.FirstOrDefault(c => c.Id == req.CreatedBy);
            var userMajor = user.ListJoinedMajors.FirstOrDefault(c => c.MajorId == req.MajorId);

            var result = await _repoUserMajor.UpdateAsync(new UserMajorUpdateRequest
            {
                Id = userMajor.Id,
                IsManager = true,
                Status = userMajor.Status,
#warning Provide Id
                ModifiedBy = Guid.Empty
            });
            if (!result)
            {
                _mudSnackbar.Add("Duyệt thất bại", Severity.Error);
            }
            else
            {
                _mudSnackbar.Add("Duyệt thành công", Severity.Success);
                var removeConfirm = await _repoMajorRequest.DeleteAsync(requestDelete);
                await LoadDataTab2();
                await LoadDataTab1();
            }
        }
    }

    //Below: Add to major, not giving access > not used

    //private async Task OnAddToMajor(MajorRequestDTO req)
    //{
    //    var requestDelete = new MajorRequestDeleteRequest
    //        {
    //            Id = req.Id,
    //        };
    //    var requestCreateUser = new UserMajorCreateRequest
    //        {
    //            MajorId = req.MajorId,
    //            UserId = req.CreatedBy ?? Guid.Empty,
    //        };

    //    var confirm = await _diagService.ShowMessageBox
    //          (
    //              "Thông báo",
    //              "Xác nhận duyệt yêu cầu?",
    //              "Xác nhận",
    //              cancelText: "Hủy"
    //          );
    //    if (confirm == true)
    //    {
    //        var createConfirm = await _repoUserMajor.CreateAsync(requestCreateUser);
    //        if (!createConfirm)
    //        {
    //            _mudSnackbar.Add("Duyệt thất bại", Severity.Error);

    //        }
    //        else
    //        {
    //            _mudSnackbar.Add("Duyệt thành công", Severity.Success);
    //            var removeConfirm = await _repoMajorRequest.DeleteAsync(requestDelete);
    //            await LoadDataTab2();
    //        }

    //    }
    //}

    private async Task OnPaginationButtonClickTab1(int pageNumber)
    {
        _isLoadingTab1 = true;
        _preqUser.PageNumber = pageNumber;
    }

    private async Task OnPaginationButtonClickTab2(int pageNumber)
    {
        _isLoadingTab2 = true;
        _preqMajorRequest.PageNumber = pageNumber;
    }

    private async Task OnQueryRequestTab1()
    {
        _isLoadingListTab1 = true;
        StateHasChanged();
        if (_preqUser.SearchString != "" && _preqUser.SearchString != null)
        {
            _preqUser.PageNumber = 1;
        }
        await LoadDataTab1().ContinueWith(re =>
        {
            _isLoadingListTab1 = false;
            StateHasChanged();
        });
    }

}