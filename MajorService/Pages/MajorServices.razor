@page "/majorService"
@using MajorService.Common;
@using MajorService.Data.DataTransferObjects.UserMajor.Request;
@using MajorService.Data.MajorRequest;
@using MajorService.Data.MajorRequest.Request;
@using MajorService.Data.Pagination;
@using MajorService.Data.UserMajor;
@using MajorService.Data.UserMajor.Request;
@using MajorService.Enum;
@using MajorService.Repo.Inplements;
@using MajorService.Repo.Interfaces;
@inject IDialogService _diagService;
@inject ISnackbar _mudSnackbar;

<MudTabs>
    <CustomListDisplay IsLoading="@(lstMajorUser == null)" Label="Danh sách giảng viên" OnSearch="@OnSearch">

    <MudTabPanel Text="Danh Sách giảng viên">
        <MudPaper Class="p-2" Elevation="0">
            <div class="d-flex justify-items-center">
                <div class="mr-auto">
                </div>
                    <AdditionalSearchBarColumn>
                        <MudSelect Variant="Variant.Outlined" Class="custom-list-display-border-input" Style="background-color: white;" AnchorOrigin="Origin.BottomCenter" Label="Chuyên ngành" @bind-Value="tenChuyenNganh">
                            @*  @foreach (var item in lstMajorUser)
                            {
                            <MudSelectItem Value="@(item.Id.ToString())">@item.TenChuyenNganh</MudSelectItem>
                            } *@
                        </MudSelect>
                    </AdditionalSearchBarColumn>
            </div>
        </MudPaper>
        <MudTable Items="@lstMajorUser">
            <HeaderContent>
                <MudTh>Email</MudTh>
                <MudTh>Chức vụ</MudTh>
                <MudTh>Chuyên ngành</MudTh>
                <MudTh>Trạng thái</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.email</MudTd>

                <MudTd>@context.RoleCodes</MudTd>
                <MudTd>@context.TenChuyenNganh</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>
                    <div class="d-flex" style="margin-top:10px">
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    </CustomListDisplay>
    @*  View danh sách giảng viên chờ duyệt  *@

    <MudTabPanel Text="Danh Sách giảng viên chờ duyệt">
        <MudTextField @bind-Value="Search" Label="Tìm kiếm giảng viên" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        <MudTable Items="@lstMajorRequest">
            <HeaderContent>
                <MudTh>Email</MudTh>
                <MudTh>Chuyên ngành</MudTh>
                <MudTh>Trạng thái</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.email</MudTd>
                <MudTd>@context.majorName</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>
                    <div class="d-flex" style="margin-top:10px">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OnAdd(context.Id,context.MajorId,context.CreatedBy,context.Status)">Chấp nhận</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="left:10px" OnClick="() => OnDelete(context.Id)">Từ chối</MudButton>
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
</MudTabs>

@code {
    [Inject] private IMajorUserRepo majorUserRepo { get; set; }
    List<MajorUserDto> lstMajorUser;
    List<MajorUserDto> lstMajorUserSearch;
    [Inject] private IMajorRequestRepo majorRequestRepo { get; set; }
    List<MajorRequestDto> lstMajorRequest { get; set; }
    // khai báo
    private string tenChuyenNganh = string.Empty;

    public MajorServices()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            LoadDataMajorUser();
            LoadDataMajorRequest();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    private async Task LoadDataMajorRequest()
    {
        var paginationMajorRequest = await majorRequestRepo.GetListMajorRequest();
        // MajorRequest = (PaginationResponse<MajorRequestDto>)paginationMajorRequest;
        lstMajorRequest = paginationMajorRequest.Data.ToList();
    }
    private async Task LoadDataMajorUser()
    {
        var paginationMajorUser = await majorUserRepo.GetListMajorUser();
        // MajorUser = paginationMajorUser;
        lstMajorUser = paginationMajorUser.Data.ToList();
    }

    private async Task LoadDataMajorUserSearch(ViewMajorUserBySearchRequest request)
    {
        var paginationMajorUserSearch = await majorUserRepo.GetListMajorUserBySearch(request);
        lstMajorUserSearch = paginationMajorUserSearch.Data.ToList();
    }

    private async Task OnDelete(Guid id)
    {
        var request = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn xóa giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var removeConfirm = await majorRequestRepo.DeleteMajorRequest(request);
            await LoadDataMajorRequest();
        }
    }
    private async Task OnAdd(Guid id, Guid MajorID, Guid? UserId, EntityStatus status)
    {
        var requestDelete = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var requestCreateUser = new CreateUserMajorRequest
            {
                MajorId = MajorID,
                UserId = UserId,
                Status = status
            };

        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn muốn thêm giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var createConfirm = await majorUserRepo.CreateMajorUser(requestCreateUser);
            if (!createConfirm)
            {
                var messageErro = await _diagService.ShowMessageBox
             (
                 "Thông báo",
                 "Thêm thất bại !"
             );
            }
            else
            {
                var message = await _diagService.ShowMessageBox
           (
               "Thông báo",
               "Thêm thành công !"
           );
                var removeConfirm = await majorRequestRepo.DeleteMajorRequest(requestDelete);
                await LoadDataMajorRequest();
                await LoadDataMajorUser();

            }

        }
    }
    public string Search { get; set; }
    private async Task OnSearch(string? searchString)
    {
        var majorUserSearch = new ViewMajorUserBySearchRequest()
            {
                Email = searchString,
            };
        LoadDataMajorUserSearch(majorUserSearch);

    }



}
