@page "/majorService"
@using MajorService.Common;
@using MajorService.Data.MajorRequest;
@using MajorService.Data.MajorRequest.Request;
@using MajorService.Data.UserMajor;
@using MajorService.Data.UserMajor.Request;
@using MajorService.Enum;
@using MajorService.Pagination;
@using MajorService.Repo.Inplements;
@using MajorService.Repo.Interfaces;
@inject IDialogService _diagService;
@inject ISnackbar _mudSnackbar;

<MudTabs>
      <MudTabPanel Text="Danh Sách giảng viên">
    <MudPaper Class="p-2" Elevation="0">
    <div class="d-flex justify-items-center">
    <div class="mr-auto">
    </div>
     <MudTextField @bind-Value="Search" Label="Tìm kiếm giảng viên" Variant="Variant.Outlined" Style="margin-right:5px" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        <AdditionalSearchBarColumn>
        <MudSelect Variant="Variant.Outlined" Class="custom-list-display-border-input" Style="background-color: white;" AnchorOrigin="Origin.BottomCenter" Label="Chuyên ngành" @bind-Value="tenChuyenNganh">
             
        </MudSelect>
    </AdditionalSearchBarColumn>
    </div>
    </MudPaper>
        <MudTable Items="@lstMajorUser">
    <HeaderContent>
    <MudTh>Email</MudTh>
    <MudTh>Chức vụ</MudTh>
    <MudTh>Chuyên ngành</MudTh>
    <MudTh>Trạng thái</MudTh>
    </HeaderContent>
    <RowTemplate>
    <MudTd>@context.email</MudTd>
    <MudTd>@context.RoleCodes</MudTd>
    <MudTd>@context.TenChuyenNganh</MudTd>
    <MudTd>@context.Status</MudTd>
    <MudTd>
          <div class="d-flex" style="margin-top:10px">
            </div>
    </MudTd>
    </RowTemplate>
    </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Danh Sách giảng viên chờ duyệt">
        <MudTextField @bind-Value="Search" Label="Tìm kiếm giảng viên" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        <MudTable Items="@MajorRequest">
            <HeaderContent>
                <MudTh>Email</MudTh>
                <MudTh>Chuyên ngành</MudTh>
                <MudTh>Trạng thái</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.email</MudTd>
                <MudTd>@context.tenChuyenNganh</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>
                    <div class="d-flex" style="margin-top:10px">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OnAdd(context.Id,context.MajorId,context.CreatedBy,context.Status)">Chấp nhận</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="left:10px" OnClick="() => OnDelete(context.Id)">Từ chối</MudButton>
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
</MudTabs>
@code {
    [Inject] private IMajorUserRepo majorUserRepo { get; set; }
    List<MajorUserDto> lstMajorUser ;
    [Inject] private IMajorRequestRepo majorRequestRepo { get; set; }
    List<MajorRequestDto> MajorRequest;

    // khai báo 
    private string tenChuyenNganh = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        LoadDataMajorUser();
        LoadDataMajorRequest();

    }
    private async Task LoadDataMajorRequest()
    {
        var paginationMajorRequest = await majorRequestRepo.GetListMajorRequest();
        MajorRequest = paginationMajorRequest.Data.ToList();
    }
    private async Task LoadDataMajorUser()
    {
        var paginationMajorUser = await majorUserRepo.GetListMajorUser();
        lstMajorUser = paginationMajorUser.Data.ToList();

    }

    private async Task OnDelete(Guid id)
    {
        var request = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn xóa giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        {
            var removeConfirm = await majorRequestRepo.DeleteMajorRequest(request);
            await LoadDataMajorRequest();
        }
    }
    private async Task OnAdd(Guid id, Guid MajorID, Guid? UserId, EntityStatus status )
    {
        var requestDelete = new MajorRequestDeleteRequest
            {
                Id = id,
            };
        var requestCreateUser = new CreateUserMajorRequest
            {
                MajorId = MajorID,
                UserId = UserId,
                Status = status
            };

        var confirm = await _diagService.ShowMessageBox
              (
                  "Thông báo",
                  "Bạn chắn chắn muốn thêm giảng viên này?",
                  "Xác nhận",
                  cancelText: "Hủy"
              );
        if (confirm == true)
        { 
            var createConfirm = await majorUserRepo.CreateMajorUser(requestCreateUser);
            if(!createConfirm)
            {
                var messageErro = await _diagService.ShowMessageBox
             (
                 "Thông báo",
                 "Thêm thất bại !"
             );
            }
            else
            {
                var message = await _diagService.ShowMessageBox
           (
               "Thông báo",
               "Thêm thành công !"
           );
                var removeConfirm = await majorRequestRepo.DeleteMajorRequest(requestDelete);
                await LoadDataMajorRequest();
                await LoadDataMajorUser();

            }
         
        }
    }


    public string Search { get; set; }

}
